#+STARTUP: content
#+AUTHOR: Alasdair McAndrew
#+HUGO_BASE_DIR: /home/amca/Nextcloud/Blogs/Hugo/whats_this
# #+HUGO_AUTO_SET_LASTMOD: t

* Pages
  :PROPERTIES:
  :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :noauthor true :nocomment true :nodate true :nopaging true :noread true
  :EXPORT_HUGO_SECTION: pages
  :EXPORT_HUGO_WEIGHT: auto
  :END:
** About this blog
   :PROPERTIES:
   :EXPORT_FILE_NAME: about
   :END:
This is the newest version of my "Numbers and Shapes" blog, containing material
on elementary mathematics, mathematics education, software, and anything else
that takes my fancy.

It is created in [Hugo](https://gohugo.io/), a static blog engine which is
blindingly fast, and works by simply serving up static html files (along with
any necessary javascript).  There is no database, and far less to fiddle with
than with wordpress.  Because it is static there is less opportunity for user
input (such as comments) but that's not an issue for me, as about 99.99% of
comments to my previous blog were spam.  User comments /can/ be configured,
using for example [Disqus](https://disqus.com/), but I won't bother.  If people
want to contact me, they can email.


And this is me, on the observation deck of the Oriental Pearl Tower, Shanghai:

![amca](/amca01.jpg)

All files relating to this blog are available on my github repo
[whats_this](https://github.com/amca01/whats_this).  You can check the
configuration, the emacs org-file which contains what I actually write, and
files generated by [ox-hugo](https://github.com/kaushalmodi/ox-hugo) and by Hugo
itself. The combinations of emacs, emacs org-mode, and ox-hugo, make creating
content for this blog a great pleasure, and far far easier than working with
wordpress.  The only issue I've found so far is that
[Mathjax](https://www.mathjax.org/) is not quite as powerful as the wordpress
[QuickLaTeX](http://www.holoborodko.com/pavel/quicklatex/) plugin.  But that's
currently a price I'm very happy to pay.

[Email](mailto:amca@numbersandshapes.net)


* Numbers and Shapes
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: nshapes
  :END:
** Numbers and Shapes
  :PROPERTIES:
  :EXPORT_FILE_NAME: numbers_and_shapes
  :EXPORT_DATE: 2018-04-24
  :END:
This is the holding place for my old blog, when I import it from Wordpress.  In
the meantime, it's [here](https://numbersandshapes.net)

** Presentations and the delight of js-reveal
  :PROPERTIES:
  :EXPORT_FILE_NAME: presentations_and_js_reveal
  :EXPORT_DATE: 2018-09-11
  :END:
Presentations are a modern bugbear. Anybody in academia or business, or
any professional field really, will have sat through untold hours of
presentations. And almost all of them are /terrible/. Wordy,
uninteresting, too many "transition effects", low information content,
you know as well as I do.

Pretty much every speaker reads the words on their slides, as though the
audience were illiterate. I went to a talk once which consisted of 60 --
yes, sixty -- slides of very dense text, and the presenter read through
each one. I think people were gnawing their own limbs off out of sheer
boredom by the end.
[[https://en.wikipedia.org/wiki/Empire_(1964_film)][Andy Warhol's
"Empire"]] would have been a welcome relief.

Since most of my talks are technical and full of mathematics, I have
naturally gravitated to the LaTeX presentation tool
[[https://en.wikipedia.org/wiki/Beamer_(LaTeX)][Beamer]]. Now Beamer is
a lovely thing for LaTeX: as part of the LaTeX ecosystem you get all of
LaTeX loveliness along with elegant slide layouts, transitions, etc. My
only issue with Beamer (and this is not a new observation by any means),
is that all Beamer presentations have a certain sameness to them. I
suspect that this is because most Beamer users are mathematicians, who
are rightly more interested in co[[https://orgmode.org][]]ntent than
appearance. It is quite possible of course to make Beamer look like
something new and different, but hardly anybody does.

However, I am not a mathematician, I am a mathematics educator, and I do
like my presentations to look good, and if possible to stand out a
little. I also have a minor issue in that I use Linux on my laptop,
which sometimes means my computer won't talk to an external projector
system. Or my USB thumb drive won't be recognized by the computer I'll
be using, and so on. One way round all this is to use an online system;
maybe one which can be displayed in a browser, and which can be placed
on a web server somewhere. There are of course plenty of such tools, and
I have had a brief dalliance with [[https://prezi.com][prezi]], but for
me prezi was not the answer: yes it was fun and provided a new paradigm
for organizing slides, but really, when you took the whizz-bang aspect
out, what was left? The few prezis I've seen in the wild showed that you
can be as dull with prezi as with any other software. Also, at the time
it didn't support mathematics.

In fact I have an abiding distrust of the whole concept of
"presentations". Most are a colossal waste of time -- people can read so
there's no need for wordiness, and most of the graphs and charts that
make up the rest of most slides are dreary and lacklustre. Hardly
anybody knows how to present information graphically in a way that
really grabs people's attention. It's lazy and insulting to your
audience to simply copy a chart from your spreadsheet and assume they'll
be delighted by it. Then you have the large class of people who fill
their blank spaces with cute cartoons and clip art. This sort of thing
annoys me probably more than it should -- when I'm in an audience I
don't want to be entertained with cute irrelevant additions, I want to
/learn/. This comes to the heart of presenting. A presenter is acting as
a teacher; the audience the learners. So presenting should be about
engaging the audience. What's in your slides comes a distant second. I
don't want new technology with clever animations and transitions,
bookmarks, non-linear slide shows; I want presenters to be themselves
interesting. (As an aside, some of the very worst presentations have
been at education conferences.)

For a superb example of attention-grabbing graphics, check out the
[[https://www.ted.com/talks/hans_rosling_shows_the_best_stats_you_ve_ever_seen][TED
talk]] by the late [[https://en.wikipedia.org/wiki/Hans_Rosling][Hans
Rosling]]. Or you can admire the work of
[[https://informationisbeautiful.net][David McCandless]].

I seem to have digressed, from talking about presentation software to
banging on about the awfulness of presentations generally. So, back to
the topic.

For a recent conference I determined to do just that: use an online
presentation tool, and I chose [[https://revealjs.com/#/][reveal.js]]. I
reckon reveal.js is presentations done right: elegant, customizable,
making the best use of html for content and css for design; and with
nicely chosen defaults so that even if you just put a few words on your
slides the result will still look good. Even better, you can take your
final slides and put them up on [[https://pages.github.com][github
pages]] so that you can access them from anywhere in the world with a
web browser. And if you're going somewhere which is not networked, you
can always take your slides on some sort of portable media. And it has
access to almost all of LaTeX via [[https://www.mathjax.org][MathJax]].

One minor problem with reveal.js is that the slides are built up with
raw html code, and so can be somewhat verbose and hard to read (at least
for me). However, there is a companion software for emacs org mode
called [[https://github.com/yjwen/org-reveal][org-reveal]], which
enables you to structure your reveal.js presentation as an org file.
This is presentation heaven. The org file gives you structure, and
reveal.js gives you a lovely presentation.

To make it available, you upload all your presentations to github.pages,
and you can present from anywhere in the world with an internet
connection! You can see an example of one of my short presentations at

[[https://amca01.github.io/ATCM_talks/lindenmayer.html]]

Of course the presentation (the software and what you do with it), is in
fact the least part of your talk. By far the most important part is the
presenter. The best software in the world won't overcome a boring
speaker who can't engage an audience.

I like my presentations to be simple and effect-free; I don't want the
audience to be distracted from my leaping and capering about.
Just to see how it works
** The Vigenere cipher in haskell
  :PROPERTIES:
  :EXPORT_FILE_NAME: vigenere_cipher_haskell
  :EXPORT_DATE: 2018-09-11
  :END:
Programming the Vigenère cipher is my go-to problem when learning a new
language. It's only ever a few lines of code, but it's a pleasant way of
getting to grips with some of the basics of syntax. For the past few
weeks I've been wrestling with [[https://www.haskell.org][Haskell]], and
I've now got to the stage where a Vigenère program is in fact pretty
easy.

As you know, the Vigenère cipher works using a plaintext and a keyword,
which is repeated as often as need be:

#+BEGIN_EXAMPLE
    T H I S I S T H E P L A I N T E X T
    K E Y K E Y K E Y K E Y K E Y K E Y
#+END_EXAMPLE

The corresponding letters are added modulo 26 (using the values A=0,
B=1, C=2, and on up to Z=25), then converted back to letters again. So
for the example above, we have these corresponding values:

#+BEGIN_EXAMPLE
    19   7   8  18   8  18  19   7   4  15  11   0   8  13  19   4  23  19
    10   4  24  10   4  24  10   4  24  10   4  24  10   4  24  10   4  24
#+END_EXAMPLE

Adding modulo 26 and converting back to letters:

#+BEGIN_EXAMPLE
    3  11   6   2  12  16   3  11   2  25  15  24  18  17  17
    D   L   G   C   M   Q   D   L   C   Z   P   Y   S   R   R
#+END_EXAMPLE

gives us the ciphertext.

The Vigenère cipher is historically important as it is one of the first
cryptosystems where a single letter may be encrypted to different
characters in the ciphertext. For example, the two "S"s are encrypted to
"C" and "Q"; the first and last "T"s are encrypted to "D" and "R". For
this reason the cipher was considered unbreakable - as indeed it was for
a long time - and was known to the French as /le chiffre
indéchiffrable/ - the unbreakable cipher. It was broken in 1863. See the
[[https://en.wikipedia.org/wiki/Vigenère_cipher][Wikipedia page]] for
more history.

Suppose the length of the keyword is . Then the -th character of the
plaintext will correspond to the character of the keyword (assuming a
zero-based indexing). Thus the encryption can be defined as

\[
c_i = p_i+k_{i\pmod{n}}\pmod{26}
\]

However, encryption can also be done without knowing the length of the
keyword, but by shifting the keyword each time - first letter to the
end - and simply taking the left-most letter. Like this:

#+BEGIN_EXAMPLE
    T H I S I S T H E P L A I N T E X T
    K E Y
#+END_EXAMPLE

so "T"+"K" (modulo 26) is the first encryption. Then we shift the
keyword:

#+BEGIN_EXAMPLE
    T H I S I S T H E P L A I N T E X T
      E Y K
#+END_EXAMPLE

and "H"+"E" (modulo 26) is the second encrypted letter. Shift again:

#+BEGIN_EXAMPLE
    T H I S I S T H E P L A I N T E X T
        Y K E
#+END_EXAMPLE

for "I"+"Y"; shift again:

#+BEGIN_EXAMPLE
    T H I S I S T H E P L A I N T E X T
          K E Y
#+END_EXAMPLE

for "S"+"K". And so on.

This is almost trivial in Haskell. We need two extra functions from the
module =Data.Char=: =chr= which gives the character corresponding to the
ascii value, and =ord= which gives the ascii value of a character:

#+BEGIN_SRC haskell
    λ> ord 'G'
    71
    λ> chr 88
    'X'
#+END_SRC

So here's what might go into a little file called =vigenere.hs=:

#+BEGIN_SRC haskell
    import Data.Char (ord,chr)

    vige :: [Char] -> [Char] -> [Char]
    vige [] k = []
    vige p [] = []
    vige (p:ps) (k:ks) = (encode p k):(vige ps (ks++[k]))
      where
        encode a b = chr $ 65 + mod (ord a + ord b) 26

    vigd :: [Char] -> [Char] -> [Char]
    vigd [] k = []
    vigd p [] = []
    vigd (p:ps) (k:ks) = (decode p k):(vigd ps (ks++[k]))
      where
        decode a b = chr $ 65 + mod (ord a - ord b) 26
#+END_SRC

And a couple of tests: the example from above, and the one on the
Wikipedia page:

#+BEGIN_SRC haskell
    λ> vige "THISISTHEPLAINTEXT" "KEY"
    "DLGCMQDLCZPYSRROBR"
    λ> vige "ATTACKATDAWN" "LEMON"
    "LXFOPVEFRNHR"
#+END_SRC


* Posts
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: post
  :END:
** Householder's methods                     :mathematics:algebra:
:PROPERTIES:
:EXPORT_FILE_NAME: Householders_methods
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :mathjax true
:EXPORT_DATE: 2018-09-09
:END:
These are a class of root-finding methods; that is, for the numerical solution
of a single nonlinear equation,
developed by [Alston Scott
Householder](https://en.wikipedia.org/wiki/Alston_Scott_Householder)
in 1970. They may be considered a generalisation of the well known [Newton-Raphson
method](https://en.wikipedia.org/wiki/Newton's_method) (also known more simply
as /Newton's method/) defined by

\[
x\leftarrow x-\frac{f(x)}{f'(x)}.
\]

where the equation to be solved is $f(x)=0$.

From a starting value $x_0$ a sequence of iterates can be generated by

\[
x_{n+1}=x_n-\frac{f(x_n)}{f'(x_n)}.
\]

As is well known, Newton's method exhibits /quadratic convergence/; that is, if
the sequence of iterates converges to a root value $r$, then the
limit

\[
\lim_{n\to\infty}\frac{x_{n+1}-r}{(x_n-r)^2}
\]

is finite.  This means, in effect, that the number of correct decimal places
doubles at each step.  Householder's method for a rate of convergence $d+1$ is
defined by

\[
x\leftarrow x-d\frac{(1/f)^{(d-1)}(x)}{(1/f)^{(d)}(x)}.
\]

We show how this definition can be rewritten in terms of ratios of derivatives,
by using Python and its symbolic toolbox [SymPy](https://www.sympy.org/en/index.html).

We start by defining some variables and functions.

#+begin_src python
from sympy import *
x = Symbol('x')
f = Function('f')(x)
#+end_src

Now we can define the first Householder formula, with $d=1$:

#+begin_src python
d = 1
H1 = x + d*diff(1/f,x,d-1)/diff(1/f,x,d)
H1
#+end_src

\[
x-\frac{f(x)}{\frac{d}{dx}f(x)}
\]

which is Newton's formula.  Now for $d=2$:

#+begin_src python
d = 2
H2 = x + d*diff(1/f,x,d-1)/diff(1/f,x,d)
H2
#+end_src

\[
x - \frac{2 \frac{d}{d x} f{\left (x \right )}}{- \frac{d^{2}}{d x^{2}}  f{\left (x \right )} + \frac{2 \left(\frac{d}{d x} f{\left (x \right )}\right)^{2}}{f{\left (x \right )}}}
\]

This is a mighty messy formula, but it can be greatly simplified by using ratios
of derivatives defined by

\[
r_k=\frac{f^{(d-1}(x)}{f^{(d)}(x)}
\]
This means that
\[
r_1=\frac{f}{f'},\quad r_2=\frac{f'}{f^{\prime\prime}}
\]
To make the subsitution into the current expression above, we can use the
substitutions
\[
f^{\prime\prime}=f'/r_2,\quad f'=f/r_1
\]
to be done sequentially (first defining the new symbols)
#+begin_src python
r_1,r_2,r_3 = symbols('r_1,r_2,r_3')
H2r = H2s.subs([(Derivative(f,x,2), Derivative(f,x)/r_2), (Derivative(f,x), f/r_1)]).simplify()
H2r
#+end_src
\[
-\frac{2r_1r_1}{r_1-2r_2}
\]
Dividing the top and bottom by $2r_2$ produces the formulation
\[
\frac{r_1}{1-\displaystyle{\frac{r_1}{2r_2}}}
\]
and so Householder's method for $d=2$ is defined by the recurrence
\[
x\leftarrow x-\frac{r_1}{1-\displaystyle{\frac{r_1}{2r_2}}}.
\]
This is known as [Halley's
method](https://en.wikipedia.org/wiki/Halley's_method), after [Edmond
Halley](https://en.wikipedia.org/wiki/Edmond_Halley), also known for his comet.
This method has been called the most often rediscovered iteration formula in the
literature.

It would exhibit /cubic convergence/, which means that the number of correct
figures roughly triples at each step.

Apply the same sequence of steps for $d=3$, and including the subsitution
\[
f^{\prime\prime\prime} = f^{\prime\prime}/r_3
\]
produces the fourth order formula
\[
x\leftarrow x-\frac{3 r_{1} r_{3} \left(2r_{2} - r_{1}\right)}{r_{1}^{2} - 6 r_{1} r_{3} + 6 r_{2} r_{3}}
\]

*** A test

We'll use the equation
\[
x^5+x-1=0
\]
which has a root close to $0.7$.  First Newton's method, which is the
Householder method of order $d=1$, and we start by defining the symbol $x$ and
the function $f$:

#+begin_src python
x = Symbol('x')
f = x**5+x-1
#+end_src

Next define the iteration of Newton's method, which can be turned into a function with the handy tool
=lambdify=:

#+begin_src python
nr = lambdify(x, x - f/diff(f,x))
#+end_src

Now, a few iterations, and print them as strings:

#+begin_src python
y = 0.7
ys = [y]
for i in range(10):
    y = N(nr(y),100)
    ys += [y]

for i in ys:
    print(str(i))

0.7
0.7599545557827765973613054484303575009107589721679687500000000000000000000000000000000000000000000000
0.7549197891599746887794253559985793967456078439525201893202319456623650882121929457935763902468565963
0.7548776691557956141971506438033504033307707534709697222674827264390889507161368160254597915269779252
0.7548776662466927739251146002523856449587324643131536407777773148939177229546284200355119465808326870
0.7548776662466927600495088963585290075677963335246916447723036615900830138144428153523526591809355834
0.7548776662466927600495088963585286918946066177727931439892839706462440390043279509776806970677946058
0.7548776662466927600495088963585286918946066177727931439892839706460806551280810907382270928422503037
0.7548776662466927600495088963585286918946066177727931439892839706460806551280810907382270928422503037
0.7548776662466927600495088963585286918946066177727931439892839706460806551280810907382270928422503037
0.7548776662466927600495088963585286918946066177727931439892839706460806551280810907382270928422503037
#+end_src
We can easily compute the number of correct decimal places each time by simply
finding the first place in each string where it differs from the previous one:

#+begin_src python
for i in range(1,7):
    d = [ys[i][j] == ys[i+1][j] for j in range(102)]
    print(d.index(False)-2)
#+end_src

\begin{array}{l}
2\cr 
3\cr 
8\cr 
16\cr 
32\cr 
66
\end{array}

and we see a remarkable closeness with doubling of the number of correct values
each iteration.

Now, the fourth order method, with $d=3$:

#+begin_src python
r1 = lambdify(x,g(x)/diff(g(x),x))
r2 = lambdify(x,diff(g(x),x)/diff(g(x),x,2))
r3 = lambdify(x,diff(g(x),x,2)/diff(g(x),x,3))
h3 = lambdify(x,x-3*r1(x)*r3(x)*(2*r2(x)-r1(x))/(r1(x)**2-6*r1(x)*r3(x)+6*r2(x)*r3(x)))
#+end_src

Now we basically copy down the above commands, except that we'll use 1500 decimal
places instead of 100:

#+begin_src python
y = 0.7
ys = [str(x)]
for i in range(10):
    y = N(h3(x),1500)
    ys += [str(y)]

for i in range(1,6):
    d = [xs[i][j] == xs[i+1][j] for j in range(1502)]
    print(d.index(False)-2)
#+end_src

\begin{array}{l}
4\\
19\\
76\\
308\\
1233
\end{array}

and we that the number of correct decimal places at each step is indeed
increased by a factor very close to 4.

** The Joukowsky Transform :noexport:
:PROPERTIES:
:EXPORT_FILE_NAME: joukowsky-transform
:EXPORT_DATE: 2018-08-24
:END:
The [Joukowksy Transform](https://en.wikipedia.org/wiki/Joukowsky_transform) is
an elegant and simple way to create an airfoil shape.  

Let $C$ be a circle in the complex plane that passes through the point $z=1$ and
encompasses the point $z=-1$.  The transform is defined as

\[
\zeta=z+\frac{1}{z}.
\]

We can explore the transform by looking at the circles centred at $(-r,0)$ with
$r<0$ and with radius $1+r$:

\[
|z-r|=1+r
\]

or in cartesian coordinates with parameter $t$:

\begin{align*}
x &= -r+(1+r)\cos(t)\\
y &= (1+r)\sin(t)
\end{align*}
so that
\[
(x,y)\rightarrow \left(x+\frac{x}{x^2+y^2},y-\frac{y}{x^2+y^2}\right).
\]



#+begin_export html
<div id="box" class="jxgbox" style="width:750px; height:375px;">
<script type="text/javascript">
 var board = JXG.JSXGraph.initBoard('box', {boundingbox: [-2, 2, 4, -1.5], axis:true,keepAspectRatio:true});
 var c = board.create('slider',[[1,1.5],[3,1.5],[0,0,1]],{name:'c'});
 var egg = board.create('curve',
                       [function(t){ return (1+c.Value()+c.Value()*Math.cos(t))*Math.cos(t);},
                        function(t){ return (1+c.Value()*Math.cos(t))*Math.sin(t);},
                        0, 2*Math.PI],{strokeWidth:4}
                        );

</script>
</div>
#+end_export

** Double Damask
:PROPERTIES:
:EXPORT_FILE_NAME: double-damask
:EXPORT_DATE: 2018-04-27
:END:
This was a comedy sketch initially performed in the revue ["Clowns in
Clover"](http://www.guidetomusicaltheatre.com/shows_c/clownsclover.htm) which
had its first performance at the Adelphi Theatre in London on December 1, 1927.
This particular sketch was written by [Dion
Titheradge](http://en.wikipedia.org/wiki/Dion_Titheradge) and starred the
inimitable [Cicely
Courtneidge](https://en.wikipedia.org/wiki/Cicely_Courtneidge) as the annoyed
customer Mrs Spooner.  It has been recorded and is available on many different
collections; you can also hear it on
[youtube](https://www.youtube.com/watch?v=0P8XSUGSR-c).

I have loved this sketch since I first heard it as a teenager on a three record
collection called something like "Masters of Comedy", being a collection of
classic sketches.  Double Damask has also been performed by Beatrice Lillie, and
you can search for this also on youtube.  For example,
[here](https://www.youtube.com/watch?v=GiRyqDfNxqU).  I hope admirers of the
excellent Ms Lillie will not be upset by my saying I far prefer Cicely
Courtneidge, whose superb diction and impeccable comic timing are beyond
reproach.

No doubt the original script is available somewhere, but in the annoying way of
the internet, I couldn't find it.  So here is my transcription of the
Courtneidge version of "Double Damask".

---

*Double Damask*

written by

Dion Titheradge

/Characters:/\
A customer, Mrs Spooner\
A shop assistant (unnamed)\
A manager, Mr Peters

/Scene:/ The linen department of a large store.

MRS SPOONER: I wonder if you could tell me if my order has gone off yet?

ASSISTANT: Not knowing your order, madam, I really couldn't say.

MRS SPOONER: But I was in here an hour ago and gave it to you.

ASSISTANT: What name, madam?

MRS SPOONER: Spooner, Mrs Spooner,

ASSISTANT: Have you an address?

MRS SPOONER: Do I look as if I live in the open air? I gave a large order for
sheets and tablecloths, to be sent to Bacon Villa, Egham.  (pronounced "Eg'm")

ASSISTANT: Eg'm?

MRS SPOONER: I hope I speak plainly: Egg Ham!

ASSISTANT: Oh yes, yes I remember perfectly now, Madam.  Let me see now... no,
your order won't go through until tomorrow morning.  Is there anything further?

MRS SPOONER: Yes, (very quickly) I want two dozen double damask dinner napkins.

ASSISTANT: I beg your pardon?

MRS SPOONER (as quicky as before): I said two dozen double damask dinner napkins.

ASSISTANT: I'm sorry madam, I don't quite catch -

MRS SPOONER: Dinner napkins, man! Dinner napkins!

ASSISTANT: Of course madam.  Plain?

MRS SPOONER: Not plain, double damask.

ASSISTANT: Yes... would you mind repeating your order Madam? I'm not quite sure.

MRS SPOONER: I want two dozen dammle dubbuck; I want two dammle dubb... oh dear,
stupid of me!  I want two dozen dammle dizzick danner nipkins.

ASSISTANT: Danner nipkins Madam?

MRS SPOONER: Yes.

ASSISTANT: You mean dinner napkins.

MRS SPOONER: That's what I said.

ASSISTANT: No, pardon me, Madam, you said danner nipkins!

MRS SPOONER: Don't be ridiculous!  I said dinner napkins, and I meant danner
nipkins.  Nipper dank...you know you're getting me muddled now.

ASSISTANT: I'm sorry Madam.  You want danner nipkins, exactly.  How many?

MRS SPOONER: Two duzzle.

ASSISTANT: Madam?

MRS SPOONER: Oh, gracious, young man - can't you get it right?  I want two dubbin duzzle
damask dinner napkins.

ASSISTANT: Oh no, Madam, not two dubbin - you mean two dozen!

MRS SPOONER: I said two dozen!  Only they must be dammle duzzick!

ASSISTANT: No, we haven't any of that in stock, Madam.

MRS SPOONER (in a tone of complete exasperation): Oh dear, of all the fools!
Can't I find anybody, just anybody with a modicum of intelligence in this store?

ASSISTANT: Well, here is our Mr Peters, Madam. Now perhaps if you ask him he might-

MR PETERS (In an authoritative "we can fix anything" kind of voice): Can I be of
any assistance to you, Madam?

MRS SPOONER: I'm sorry to say that your assistant doesn't appear to speak
English.  I'm giving an order, but it might just as well be in Esperanto for all
he understands.

MR PETERS: Allow me to help you Madam.  You require?

MRS SPOONER: I require (as quickly as before) two dozen double damask dinner napkins.

MR PETERS: I beg pardon, Madam?

MRS SPOONER: Oh heavens - can't you understand?

MR PETERS: Would you mind repeating your order, Madam.

MRS SPOONER: I want two dazzen -

MR PETERS: Two dozen!

MRS SPOONER: I said two dozen!

MR PETERS: Oh no no Madam - no, you said two dazzen.  But I understand perfectly
what you mean.  You mean two dozen; in other words - a double dozen.

MRS SPOONER: That's it! A duzzle dubbin double damask dinner napkins.

MR PETERS: Oh no, pardon me, Madam, pardon me: you mean a double dozen double dummick
dinner napkins.

ASSISTANT: Double damask, sir.

MR PETERS: I said double damask!  It's... dapper ninkins you require, sir.

MRS SPOONER: Please get it right, I want dinner napkins, dinner napkins.

MR PETERS: I beg pardon, Madam. So stupid of me...one gets so confused...  (Laughs)

MRS SPOONER: It is not a laughing matter.

MR PETERS: Of course.  Dipper nankins, madam.

ASSISTANT: Dapper ninkins, sir.

MRS SPOONER: Danner nipkins.

MR PETERS: I understand exactly what Madam wants.  It is two d-d-d-d-..two d- Would you
mind repeating your order please, Madam?

MRS SPOONER: Ohhh, dear.. I want two duzzle dizzen damask dinner dumplings!

MR PETERS: Allow me, Madam, allow me.  The lady requires (quickly) two dubbin
double damask dunner napkins.

ASSISTANT: Dunner napkins sir?

MR PETERS: Certainly!  Two dizzen.

MRS SPOONER: Not two dizzen - I want two dowzen!

MR PETERS: Quite so, Madam, quite so.  If I may say so we're getting a little
bit confused, splitting it up, as it were.  Now, the full order, the full order,
is two dazzen dibble dummisk n'dipper dumkins.

ASSISTANT: Excuse me, sir, you mean two dummen dammle dimmick dizzy napkins.

(The next four four lines are spoken almost on top of each other)

MRS SPOONER: I do not want dizzy napkins, I want two dizzle dammen damask -

MR PETERS: No - two dizzle dammle dizzick!

ASSISTANT: Two duzzle dummuck dummy!

MRS SPOONER: Two damn dizzy diddle dimmer dipkins!

MR PETERS (Shocked): Madam, Madam!  Please, please - your language!

MRS SPOONER: Oh, blast.  Give me twenty four serviettes.

** Graphs of Eggs                               :geometry:jsxgraph:
:PROPERTIES:
:EXPORT_FILE_NAME: egg_graphs
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :mathjax true
:EXPORT_DATE: 2018-04-20
:END:
I recently came across some nice material on [John Cook's
blog](https://www.johndcook.com/blog/) about equations that described eggs.

It turns out there are vast number of equations whose graphs are egg-shaped:
that is, basically ellipse shape, but with one end "rounder" than the other.

You can see lots at Jürgen Köller's [Mathematische
Basteleien](http://www.mathematische-basteleien.de/eggcurves.htm) page.
(Although this blog is mostly in German, there are enough English language pages
for monoglots such as me).  And plenty of egg equations can be found in the
[2dcurves](http://www.2dcurves.com/) pages.  

Another excellent source of eggy equations is [TDCC
Laboratory](http://www.geocities.jp/nyjp07/index_egg_E.html) from Japan (the
link here is to their English language page).  For the purposes of experimenting
we will use equations from this TDCC, adjusted as necessary.  Many of their
equations are given in parametric form, which means they can be easily graphed
and explored using [JSXGraph](https://jsxgraph.org/wp/index.html).

The first set of parametric equations, whose author is given to be Nobuo
Yamamoto, is:

\begin{align*}
x&=(a+b+b\cos\theta)\cos\theta\\
y&=(a+b\cos\theta)\sin\theta
\end{align*}

If we divide these equations by $a$, and use the parameter $c$ for $b/a$ we
obtain slightly simpler equations:

\begin{align*}
x&=(1+c+c\cos\theta)\cos\theta\\
y&=(1+c\cos\theta)\sin\theta
\end{align*}

Here you can explore values of $c$ between 0 and 1:

#+begin_export html
<div id="box" class="jxgbox" style="width:750px; height:375px;">
<script type="text/javascript">
 var board = JXG.JSXGraph.initBoard('box', {boundingbox: [-2, 2, 4, -1.5], axis:true,keepAspectRatio:true});
 var c = board.create('slider',[[1,1.5],[3,1.5],[0,0,1]],{name:'c'});
 var egg = board.create('curve',
                       [function(t){ return (1+c.Value()+c.Value()*Math.cos(t))*Math.cos(t);},
                        function(t){ return (1+c.Value()*Math.cos(t))*Math.sin(t);},
                        0, 2*Math.PI],{strokeWidth:4}
                        );

</script>
</div>
#+end_export

Another [set of equations](http://www.geocities.jp/nyjp07/index_egg_by_Itou_E.html) is said to be due to [Tadao
Ito](http://web1.kcn.jp/hp28ah77/us_author.htm) (whose surname is sometimes
transliterated as Itou):

\begin{align*}
x&=\cos\theta\\
y&=c\cos\frac{\theta}{4}\sin\theta
\end{align*}

#+begin_export html
<div id="box2" class="jxgbox" style="width:500px; height:375px;">
<script type="text/javascript">
 // var board2 = JXG.JSXGraph.freeBoard(board2); 
 var board2 = JXG.JSXGraph.initBoard('box2', {boundingbox: [-1.5, 1.5, 2, -1.5], axis:true,keepAspectRatio:true});
 var c2 = board2.create('slider',[[0.25,1.25],[1.75,1.25],[0,0,1.5]],{name:'c'});
 var egg2 = board2.create('curve',
                       [function(t){ return Math.cos(t);},
                        function(t){ return c2.Value()*Math.cos(t/4)*Math.sin(t);},
                        -Math.PI, Math.PI],{strokeWidth:4}
                        );

</script>
</div>
#+end_export

Many more equations: parametric, implicit, can be found at the sites linked above.

** Exploring JSXGraph                                    :jsxgraph:
:PROPERTIES:
:EXPORT_FILE_NAME: exploring_jsxgraph
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :mathjax true
:EXPORT_DATE: 2018-04-14
:END:

[JSXGraph](https://jsxgraph.org/wp/index.html) is a graphics package deveoped in
Javascript, and which seems to be tailor-made for a static blog such as this.
It consists of only two files: the javascript file itself, and an accompanying
css file, which you can download.   Alternaively you can simply link to the
online files at the Javascript content delivery site
[cdnjs](https://cdnjs.com/about) managed by
[cloudflare](https://www.cloudflare.com/).  There are cloudflare servers all
over the world - even in my home town of Melbourne, Australia. 

So I modified the =head.html= file of my theme to include a link to the
necessary files:



#+begin_src html
#+end_src

So I downloaded the javascript and css files as described
[here](https://jsxgraph.uni-bayreuth.de/wp/download/index.html)
and also, for good measure, added the script line (from that page) to the
=layouts/partials/head.html= file of the theme.  Then copied the following 
snippet from the JSXGraph site:

#+begin_src html
<div id="box" class="jxgbox" style="width:500px; height:500px;"></div>
<script type="text/javascript">
 var board = JXG.JSXGraph.initBoard('box', {boundingbox: [-10, 10, 10, -10], axis:true});
</script>
#+end_src

However, to make this work the entire script needs to be inside a =<div>=,
=</div>= pair, like this:

#+begin_src html
<div id="box" class="jxgbox" style="width:500px; height:500px;">
<script type="text/javascript">
 var board = JXG.JSXGraph.initBoard('box', {boundingbox: [-10, 10, 10, -10], axis:true});
</script>
</div>
#+end_src

Just to see how well this works, here's Archimedes' /neusis/ construction of an
angle trisection: given an angle $\theta$ in a unit semicircle, its trisection is
obtained by laying against the circle a straight line with points spaced 1
apart (drag point A about the circle to see this in action):
#+begin_export html 
<div id="box" class="jxgbox" style="width:750px; height:500px;">
<script type="text/javascript">
 JXG.Options.axis.ticks.insertTicks = false;
 JXG.Options.axis.ticks.drawLabels = false;
 var board = JXG.JSXGraph.initBoard('box', {boundingbox: [-1.5, 1.5, 3, -1.5],axis:true,keepAspectRatio:true});
 var p = board.create('point',[0,0],{visible:false,fixed:true});
 var neg = board.create('point',[-0.67,0],{visible:false,fixed:true});
 var c = board.create('circle',[[0,0],1.0]);
 var a = board.create('glider',[-Math.sqrt(0.5),Math.sqrt(0.5),c],{name:'A'});
 var l1 = board.create('segment',[a,p]);
 var ang = board.create('angle',[a,p,neg],{radius:0.67,name:'θ',type:'sector'});
 var theta = JXG.Math.Geometry.rad(a,p,neg);
 var bb = board.create('point',[
          () => Math.cos(Math.atan2(a.Y(),-a.X())/3),
          () => Math.sin(Math.atan2(a.Y(),-a.X())/3)
          ],{name:'B'});
 var w = board.create('point',[() =>  2*Math.cos(Math.atan2(a.Y(),-a.X())/3),0]);
 var l2 = board.create('line',[a,w]);
 var l3 = board.create('segment',[p,bb]);
 var l4 = board.create('segment',[bb,w],{strokeWidth:6,strokeColor:'#FF0000'});
 var ang2 = board.create('angle',[bb,w,neg],{radius:0.67,name:'θ/3'});
</script> 
</div>
#+end_export

For what it's worth, here is the splendid javascript code to produce the above
figure:

#+begin_src html
<div id="box" class="jxgbox" style="width:500px; height:333.33px;">
<script type="text/javascript">
 JXG.Options.axis.ticks.insertTicks = false;
 JXG.Options.axis.ticks.drawLabels = false;
 var board = JXG.JSXGraph.initBoard('box', {boundingbox: [-1.5, 1.5, 3, -1.5],axis:true});
 var p = board.create('point',[0,0],{visible:false,fixed:true});
 var neg = board.create('point',[-0.67,0],{visible:false,fixed:true});
 var c = board.create('circle',[[0,0],1.0]);
 var a = board.create('glider',[-Math.sqrt(0.5),Math.sqrt(0.5),c],{name:'A'});
 var l1 = board.create('segment',[a,p]);
 var ang = board.create('angle',[a,p,neg],{radius:0.67,name:'θ'});
 var theta = JXG.Math.Geometry.rad(a,p,neg);
 var bb = board.create('point',[function(){return Math.cos(Math.atan2(a.Y(),-a.X())/3);},function(){return Math.sin(Math.atan2(a.Y(),-a.X())/3);}],{name:'B'});
 var w = board.create('point',[function(){return Math.cos(Math.atan2(a.Y(),-a.X())/3)/0.5;},0]);
 var l2 = board.create('line',[a,w]);
 var l3 = board.create('segment',[p,bb]);
 var l4 = board.create('segment',[bb,w],{strokeWidth:6,strokeColor:'#FF0000'});
 var ang2 = board.create('angle',[bb,w,neg],{radius:0.67,name:'θ/3'});
</script> 
</div>
#+end_src

Quite wonderful, it is.

** The trinomial theorem                      :mathematics:algebra:
:PROPERTIES:
:EXPORT_FILE_NAME: trinomial_theorem
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :mathjax true
:EXPORT_DATE: 2018-04-05
:END:
When I was teaching the binomial theorem (or, to be more accurate, the binomial
/expansion/) to my long-suffering students, one of them asked me if there was a
/trinomial/ theorem.  Well, of course there is, although in fact expanding sums
of greater than two terms is generally not classed as a theorem described by the
number of terms. The general result is

\[
(x_1+x_2+\cdots+x_k)^n=\sum_{a_1+a_2+\cdots+a_k=n}
{n\choose a_1,a_2,\ldots,a_k}x_1^{a_1}x_2^{a_2}\cdots x_k^{a_k}
\]

so in particular a "trinomial theorem" would be

\[
(x+y+z)^n=\sum_{a+b+c=n}{n\choose a,b,c}x^ay^bz^c.
\]

Here we define

\[
{n\choose a,b,c}=\frac{n!}{a!b!c!}
\]

and this is known as a /trinomial coefficient/; more generally, for an arbitrary
number of variables, it is a /multinomial coefficient/.  It is guaranteed to be
an integer if the lower values sum to the upper value.

So to compute $(x+y+z)^5$ we could list all integers $a,b,c$ with $0\le a,b,c\le 5$
for which $a+b+c=5$, and put them all into the above sum.  

But of course there's a better way, and it comes from expanding $(x+y+z)^5$ as a
binomial $(x+(y+z))^5$ so that

\begin{array}{rcl}
(x+(y+x))^5&=&x^5\\
&&+5x^4(y+z)\\
&&+10x^3(y+z)^2\\
&&+10x^2(y+z)^3\\
&&+5x(y+z)^4\\
&&+(y+z)^5
\end{array}

Now we can expand each of those binomial powers:

\begin{array}{rcl}
(x+(y+x))^5&=&x^5\\
&&+5x^4(y+z)\\
&&+10x^3(y^2+2yz+z^2)\\
&&+10x^2(y^3+3y^2z+3yz^2+z^3)\\
&&+5x(y^4+4y^3z+6y^2z^2+4yz^3+z^4)\\
&&+(y^5+5y^4z+10y^3z^2+10y^2z^3+5yz^4+z^5)
\end{array}

Expanding this produces

\begin{split}
x^5&+5x^4y+5x^4z+10x^3y^2+20x^3yz+10x^3z^2+10x^2y^3+30x^2y^2z+30x^2yz^3\\
&+10x^2z^3+5zy^4+20xy^3z+30xy^2z^2+20xyz^3+5xz^4+y^5+5y^4z+10y^3z^2\\
&+10y^2z^3+5yz^4+z^5
\end{split}

which is an equation of rare beauty.

But there's a nice way of setting this up, which involves writing down Pascal's
triangle to the fifth row, and putting a fifth row, as a column, on the side.
Then multiply across:

\begin{array}{lcccccccccc}
1&&&&&&1&&&&&\\
5&&&&&1&&1&&&&\\
10\quad\times&&&&1&&2&&1&&&\\
10&&&1&&3&&3&&1&&\\
5&&1&&4&&6&&4&&1&\\
1&1&&5&&10&&10&&5&&1
\end{array}

to produce the final array of coefficients (with index numbers at the left):

\begin{array}{l*{10}{c}}
0\qquad{}&&&&&&1&&&&&\\
1&&&&&5&&5&&&&\\
2&&&&10&&20&&10&&&\\
3&&&10&&30&&30&&10&&\\
4&&5&&20&&30&&20&&5&\\
5&1&&5&&10&&10&&5&&1
\end{array}

Row $i$ of this array corresponds to $x^{5-i}$ and all combinations of powers
$y^bz^c$ for $0\le b,c\le i$.  Thus for example the fourth row down,
corresponding to \( i=3 \), may be considered as the coefficients of the terms

\[
x^2y^3,\quad x^2y^2z,\quad x^2yz^2,\quad xz^3.
\]

Note that the triangle of coefficients is symmetrical along all three centre
lines, as well as rotationally symmetric by 120°.  

** Playing with Hugo                                     :hugo:org:
:PROPERTIES:
:EXPORT_FILE_NAME: playing_with_Hugo
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :mathjax true
:EXPORT_DATE: 2018-04-03
:END:
I've been using wordpress as my blogging platform since I first started, about
10 years ago.  (In fact the first post I can find is dated March 30, 2008.)  I
chose [wordpress.com](http://wordpress.com) back then because it was (a) free,
and (b) supported mathematics through a version (or subset) of
[LaTeX](https://www.latex-project.org).  As I have used LaTeX extensively for
all my writing since the early 1990's, it's a standard requirement for me.

Some time later I decided to start hosting my own server (well, a VPS), on which
I could use [wordpress.org](https://wordpress.org), which is the self-hosted
version of wordpress.  The advantages of a self hosted blog are many, but I
particularly like the greater freedom, the ability to include a far greater
variety of plugins, and the larger choice of themes.  And one of the plugins I
liked particularly was [WP
QuickLaTeX](https://wordpress.org/plugins/wp-quicklatex/) which provided a LaTeX
engine far superior to the in-built one of wordpress.com.  Math bloggin heaven!

However, hosting my own wordpress site was not without difficulty.  First I had
to install it and get it up and running (even this was non-trivial), and then I
had to manage all the users and passwords: myself as a standard user, wp-admin
for accessing the Wordpress site itself, a few others.  I have quite a long list
containing all the commands I used, and all the users and passwords I created.

This served me well, but it was also slow to use.  My VPS is perfectly
satisfactory, but it is not fast (I'm too cheap to pay for much more than a
low-powered one), and the edit-save-preview cycle of online blogging with my
wordpress installation was getting tiresome.  

Plus the issue of security.  I've been hacked once, and I've since managed to
secure my site with a free certificate from [Let's
Encrypt](https://letsencrypt.org).  In fact, in many ways Let's Encrypt is one
of the best things to have happened for security.  An open Certificate Authority
is manna from heaven, as far as I'm concerned.

Wordpress is of course more than just blogging software.  It now grandly styles
itself as Site Building software and Content Management System, and the site
claims that "30% of the web uses Wordpress".  It is in fact hugely powerful and
deservedly popular, and can be used for pretty much whatever sort of site you
want to build.   Add to that a seemingly infinite set of plugins, and you have
an entire ecosystem of web-building.

However, all of that popularity and power comes at a cost: it is big, confusing,
takes work to maintain, keep secure, and keep up-to-date, and is a target for
hackers.  Also for me, it has become colossal overkill.  I don't need all those
bells and whistles; all I want to do is host my blog and share my posts with the
world (the $1.5\times 10^{-7}\%$ of the world who reads it).

The kicker for me was checking out a [mathematics education
blog](http://rtalbert.org) by an author I admire greatly, to discover it was
built with the static blog engine [jekyll](https://jekyllrb.com).  So being the
inventive bloke I am, I thought I'd do the same.

But a bit of hunting led me to [Hugo](https://gohugo.io), which apparently is
very similar to jekyll, but much faster, and written in [Go](https://golang.org)
instead of [Ruby](https://www.ruby-lang.org/en/).  Since I know nothing about
either Go or Ruby I don't know if it's the language which makes the difference,
or something else.  But it sure looks nice, and supports
[mathjax](https://www.mathjax.org) for LaTeX.

So my current plan is to migrate from wordpress to Hugo, and see how it goes!
** Python GIS, and election results                 :python:voting:
:PROPERTIES:
:EXPORT_FILE_NAME: python_GIS
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :mathjax true
:EXPORT_DATE: 2018-03-31
:END:
*** Election mapping

A few weeks ago there was a by-election in my local electorate (known as an
electoral /division/) of Batman here in Australia.  I was interested in
comparing the results of this election with the previous election two years ago.
In this division it's become a two-horse race: the Greens against the Australian
Labor Party.  Although Batman had been a solid Labor seat for almost its entire
existence - it used to be considered one of the safest Labor seats in the
country - over the past decade or so the Greens have been making inroads into
this Labor heartland, to the extent that is no longer considered a safe seat.
And in fact for this particular election the Greens were the popular choice to
win.  In the end Labor won, but my interest is not so much tracing the votes,
but trying to map them.

Python has a vast suite of mapping tools, so much so that it may be that Python
has become the GIS tool of choice.  And there are lots of web pages devoted to
discussing these tools and their uses, such as [this
one](http://matthewrocklin.com/blog/work/2017/09/21/accelerating-geopandas-1).

My interest was producing maps such as are produced by
[pollbludger](https://www.pollbludger.net/by-elections/fed-2018-03-batman.htm)
This is the image from that page:

![pollbludger](/pollbludger_batman.png)

As you can see there are basically three elements:

 * the underlying streetmap
 * the border of the division
 * the numbers showing the percentage wins of each party at the various polling
    booths.

I wanted to do something similar, but replace the numbers with circles whose
sizes showed the strength of the percentage win at each place.

*** Getting the information

Because this election was in a federal division, the management of the polls and
of the results (including counting the votes) was managed by the Australian
Electoral Commission, whose [pages about this by-election](
http://www.aec.gov.au/Elections/supplementary_by_elections/2018-batman/) contain
pretty much all publicly available information.  You can copy and paste the
results from their pages, or download them as CSV files.

Then I needed to find the coordinates (Longitude and Latitude) of all the
polling places, of which there were 42 at fixed locations.  There didn't seem to
be a downloadable file for this, so for each booth address (given on the AEC
site), I entered it into Google Maps and copied down the coordinates as given.

The boundaries of all the divisions can again be downloaded from the [AEC GIS
page](http://www.aec.gov.au/Electorates/gis/index.htm).  These are given in
various standard GIS files.

*** Putting it all together

The tools I felt brave enough to use were:

  * [Pandas:](https://pandas.pydata.org) Python's data analysis library.  I
    really only needed to read information from CSV files that I could then use
    later.
  * [Geopandas:](http://geopandas.org) This is a GIS library with Pandas-like
    syntax, and is designed in part to be a GIS extension to Pandas.  I would
    use it to extract and manage the boundary data of the electoral division.
  * [Cartopy:](http://scitools.org.uk/cartopy/) which is a library of
    "cartographic tools".

And of course the standard [matplotlib](http://matplotlib.org) for plotting,
[numpy](http://www.numpy.org) for array handling.

My guides were the [London tube stations
example](http://scitools.org.uk/cartopy/docs/latest/gallery/tube_stations.html)
from Cartopy and a local (Australian) data analysis blog which discussed the
[use of Cartopy](http://www.net-analysis.com/blog/cartopytiles.html) including
adding graphics to an map image.

There are lots of other GIS tools for Python, some of which seem to be very good
indeed, and all of which I downloaded:

  * [Fiona](https://github.com/Toblerity/Fiona): which is a "nimble" API for
    handling maps
  * [Descartes](https://bitbucket.org/sgillies/descartes/): which provides a
    means by which matplotlib can be used to manage geographic objects
  * [geoplotlib](https://github.com/andrea-cuttone/geoplotlib): for "visualizing
    geographical data and making maps"
  * [Folium](http://python-visualization.github.io/folium/): for visualizing maps
    using the [leaflet.js](http://leafletjs.com) library.  It may be that the
    mapping I wanted to do with Python could have been done just as well in
    Javascript alone.  And probably other languages.  I stuck with Python simply
    because I knew it best.
  * [QGIS](https://qgis.org/en/site/): which is designed to be a complete free
    and open source GIS, and with APIs both for Python and C++
  * [GDAL](http://www.gdal.org): the "Geospatial Data Abstraction Library" which
    has a [Python package](https://pypi.python.org/pypi/GDAL) also called GDAL,
    for manipulating geospatial raster and vector data.

I suspect that if I was professionally working in the GIS area some or all of
these packages would be at least as - and maybe even more - suitable than the
ones I ended up using.  But then, I was starting from a position of absolute
zero with regards to GIS, and also I wanted to be able to make use of the tools
I already knew, such as Pandas, matplotlib, and numpy.

Here's the start, importing the libraries, or the bits of them I needed:

#+begin_src python
import matplotlib.pyplot as plt
import numpy as np
import cartopy.crs as ccrs
from cartopy.io.img_tiles import GoogleTiles
import geopandas as gpd
import pandas as pd
#+end_src

I then had to read in the election data, which was a CSV files from the AEC
containing the Booth, and the final distributed percentage weighting to the ALP
and Greens candidates, and heir percentage scores.  As well, I read in the
boundary data:

#+begin_src python
bb = pd.read_csv('Elections/batman_booths_coords.csv')  # contains all election info plus lat, long of booths
longs = np.array(bb['Long'])
lats = np.array(bb['Lat'])
v = gpd.read_file('VicMaps/VIC_ELB.MIF')  # all electoral divisions in MapInfo form
bg = v.loc[2].geometry                    # This is the Polygon representing Batman
b_longs = bg.exterior.xy[0]               # These next two lines are the longitudes and latitudes
b_lats = bg.exterior.xy[1]                #
#+end_src

Notice that =bb= uses Pandas to read in the CSV files which contains all the AEC
information, as well as the latitude and longitude of each Booth, which I'd
added myself.  Here =longs= and =lats= are the coordinates of the polling
booths, and =b_longs= and =b-lats= are all the vertices which form the boundary
of the division.

Now it's all pretty straigtforward, especially with the examples mentioned above:

#+begin_src python
fig = plt.figure(figsize=(16,16))

tiler = GoogleTiles()
ax = plt.axes(projection=tiler.crs)

margin=0.01
ax.set_extent((bg.bounds[0]-margin, bg.bounds[2]+margin,bg.bounds[1]-margin, bg.bounds[3]+margin))

ax.add_image(tiler,12)
for i in range(44):
    plt.plot(longs[i],lats[i],ga2[i],markersize=abs(ga[i]),alpha=0.7,transform=ccrs.Geodetic())

plt.plot(b_longs,b_lats,'k-',linewidth=5,transform=ccrs.Geodetic())
plt.title('Booth results in the 2018 Batman by-election')
plt.show()
#+end_src 

Here =GoogleTiles= provide the street map to be used as the "base" of our map.
Open Streep Map (as OSM) is available too, but I thin in this instance, Google
Maps is better.  Because the map is rendered as an image (with some unavoidable
blurring), I find that Google gave a better result than OSM.

Also, =ga2= is a little array which simply produces plotting of the style =ro=
(red circle) or =go= (green circle).  Again, I make the program do most of the
work.

And here is the result, saved as an image:

![Batman 2018](/batman2018trim.png)

I'm quite pleased with this output.

And a quick check of some maths, first inline 
$ (x+2y)^3=x^3+6x^2y+12xy^2+8y^3 $ and also displayed:
<div>
$$
\int^\infty_{-\infty}e^{-x^2}\,dx=\sqrt{\pi}.
$$
</div>



* COMMENT Local Variables                                 :ARCHIVE:
# Local Variables:
# fill-column: 80
# eval: (auto-fill-mode 1)
# eval: (add-hook 'after-save-hook #'org-hugo-export-wim-to-md-after-save :append :local)
# org-hugo-footer: "\n\n[//]: # \"Exported with love from a post written in Org mode\"\n[//]: # \"- https://github.com/kaushalmodi/ox-hugo\""
# End:

