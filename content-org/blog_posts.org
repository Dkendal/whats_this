#+STARTUP: content
#+AUTHOR: Alasdair McAndrew
#+HUGO_BASE_DIR: /home/amca/Nextcloud/Blogs/Hugo/whats_this
# #+HUGO_AUTO_SET_LASTMOD: t

* Pages
  :PROPERTIES:
  :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :noauthor true :nocomment true :nodate true :nopaging true :noread true
  :EXPORT_HUGO_SECTION: pages
  :EXPORT_HUGO_WEIGHT: auto
  :END:
** About this blog
   :PROPERTIES:
   :EXPORT_FILE_NAME: about
   :END:
This is the newest version of my "Numbers and Shapes" blog, containing material
on elementary mathematics, mathematics education, software, and anything else
that takes my fancy.

It is created in [Hugo](https://gohugo.io/), a static blog engine which is
blindingly fast, and works by simply serving up static html files (along with
any necessary javascript).  There is no database, and far less to fiddle with
than with wordpress.  Because it is static there is less opportunity for user
input (such as comments) but that's not an issue for me, as about 99.99% of
comments to my previous blog were spam.  User comments /can/ be configured,
using for example [Disqus](https://disqus.com/), but I won't bother.  If people
want to contact me, they can email.


And this is me, on the observation deck of the Oriental Pearl Tower, Shanghai:

![amca](/amca01.jpg)

All files relating to this blog are available on my github repo
[whats_this](https://github.com/amca01/whats_this).  You can check the
configuration, the emacs org-file which contains what I actually write, and
files generated by [ox-hugo](https://github.com/kaushalmodi/ox-hugo) and by Hugo
itself. The combinations of emacs, emacs org-mode, and ox-hugo, make creating
content for this blog a great pleasure, and far far easier than working with
wordpress.  The only issue I've found so far is that
[Mathjax](https://www.mathjax.org/) is not quite as powerful as the wordpress
[QuickLaTeX](http://www.holoborodko.com/pavel/quicklatex/) plugin.  But that's
currently a price I'm very happy to pay.

[Email](mailto:amca@numbersandshapes.net)


* Posts
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: post
  :END:
** Linear programming in Python (2)
:PROPERTIES:
:EXPORT_FILE_NAME: linear_programming_in_python_2
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :mathjax true
:EXPORT_DATE: 2018-10-30
:END:

Here's an example of a transportation problem, with information given as a
table:

#+begin_export html
<style>.transport
table
{ width: 80%;
  table-layout: fixed;}
th, td
{ text-align: center;}
th
{ background: #DCDCDC;}
</style>

<div class="transport">
<table>
<tr>
<td colspan='2'></td>
<td colspan='5'><b>Demands</b></td>
</tr>
<tr>
<td colspan='2'></td>
<th>300</th>
<th>360</th>
<th>280</th>
<th>340</th>
<th>220</th>
</tr>
<tr>
<td></td> 
<th>750</th> 
<td>100</td>
<td>150</td>
<td>200</td>
<td>140</td>
<td>35</td>
</tr> 
<tr>
<td><b>Supplies&nbsp;</b></td> 
<th>400</th> 
<td>50</td>
<td>70</td>
<td>80</td>
<td>65</td>
<td>80</td>
</tr> 
<tr>
<td></t> 
<th>350</th> 
<td>40</td>
<td>90</td>
<td>100</td>
<td>150</td>
<td>130</td>
</tr> 
</table>
</div>
#+end_export

This is an example of a /balanced, non-degenerate/ transportation problem.  It
is /balanced/ since the sum of supplies equals the sum of demands, and it is
/non-degenerate/ as there is no proper subset of supplies whose sum is equal to
that of a proper subset of demands.  That is, there are no balanced
"sub-problems".

In such a problem, the array values may be considered to be the costs of
transporting one object from a supplier to a demand.  (In the version of the
problem I pose to my students it's cars between distributors and car-yards; in
another version it's tubs of ice-cream between dairies and supermarkets.)  The
idea of course is to move all objects from supplies to demands while minimizing
the total cost.

This is a standard linear optimization problem, and it can be solved by any
method used to solve such problems, although generally specialized methods are
used.

But the intention here is to show how easily this problem can be managed using
myMathProg (and with numpy, for the simple use of printing an array):

#+begin_src python
import pymprog as py
import numpy as np
py.begin('transport')
M = range(3)  # number of rows and columns
N = range(5)
A = py.iprod(M,N) # Cartesian product 
x = py.var('x', A, kind=int) # all the decision variables are integers
costs = [[100,150,200,140,35],[50,70,80,65,80],[40,90,100,150,130]]
supplies = [750,400,350]
demands = [300,360,280,340,220]
py.minimize(sum(costs[i][j]*x[i,j] for i,j in A))
# the total sum in each row must equal the supplies
for k in M: 
    sum(x[k,j] for j in N)==supplies[k] 
# the total sum in each column must equal the demands
for k in N: 
    sum(x[i,k] for i in M)==demands[k]
py.solve()
print('\nMinimum cost: ',py.vobj())
A = np.array([[x[i,j].primal for j in N] for i in M])
print('\n')
print(A)
print('\n')
#py.sensitivity()
py.end()
#+end_src

with solution:

#+begin_src
  GLPK Simplex Optimizer, v4.65
  n8 rows, 15 columns, 30 non-zeros
        0: obj =   0.000000000e+00 inf =   3.000e+03 (8)
        7: obj =   1.789500000e+05 inf =   0.000e+00 (0)
  *    12: obj =   1.311000000e+05 inf =   0.000e+00 (0)
  OPTIMAL LP SOLUTION FOUND
  GLPK Integer Optimizer, v4.65
  8 rows, 15 columns, 30 non-zeros
  15 integer variables, none of which are binary
  Integer optimization begins...
  Long-step dual simplex will be used
  +    12: mip =     not found yet >=              -inf        (1; 0)
  +    12: >>>>>   1.311000000e+05 >=   1.311000000e+05   0.0% (1; 0)
  +    12: mip =   1.311000000e+05 >=     tree is empty   0.0% (0; 1)
  INTEGER OPTIMAL SOLUTION FOUND
  
  Minimum cost:  131100.0
  
  [[  0. 190.   0. 340. 220.]
   [  0. 120. 280.   0.   0.]
   [300.  50.   0.   0.   0.]]
#+end_src

As you see, the definition of the problem in Python is very straightforward. 

** Linear programming in Python
:PROPERTIES:
:EXPORT_FILE_NAME: linear_programming_in_python
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :mathjax true
:EXPORT_DATE: 2018-10-28
:END:

For my elementary linear programming subject, the students (who are all
pre-service teachers) use Excel and its Solver as the computational tool of
choice.  We do this for several reasons: Excel is software with which they're
likely to have had some experience, also it's used in schools; it also means we
don't have to spend time and mental energy getting to grips with new and
unfamiliar software.  And indeed the [mandated
curriculum](https://www.vcaa.vic.edu.au/Documents/vce/adviceforteachers/furthermaths/sample_learning_activity_graphs_relations.docx) 
includes computer exploration, using either [Excel
Solver](https://www.excel-easy.com/data-analysis/solver.html), 
or the Wolfram Alpha [Linear Programming
widget](http://www.wolframalpha.com/widgets/gallery/view.jsp?id=1e692c6f72587b2cbd3e7be018fd8960).

This is all very well, but I balk at the reliance on commercial software, no
matter how widely used it may be.  And for my own exploration I've been looking
for an open-source equivalent.

In fact there are plenty of linear programming tools and libraries; two of the
most popular open-source ones are:

- The GNU Linear Programming Kit, [GLPK](https://www.gnu.org/software/glpk/)
- Coin-or Linear Programming, [Clp](https://projects.coin-or.org/Clp)

There's a [huge list on
wikipedia](https://en.wikipedia.org/wiki/List_of_optimization_software) which
includes open-source and proprietary software.

For pretty much any language you care to name, somebody has taken either GLPK or
Clp (or both) and produced a language API for it.  For Python there's
[PuLP](https://pythonhosted.org/PuLP/); for [Julia](https://julialang.org) there's
[JuMP](http://www.juliaopt.org); for Octave there's the `glpk` command, and so
on.  Most of the API's include methods of calling other solvers, if you have
them available.

However not all of these are well documented, and in particular some of them
don't allow sensitivity analysis: computing shadow prices, or ranges of the
objective coefficients.  I discovered that JuMP doesn't yet support this -
although to be fair sensitivity analysis does depend on the problem being
solved, and the solver being used.

Being a Python aficionado, I thought I'd check out some Python packages, of which
a list is given at an [operations research
page](https://wiki.python.org/moin/PythonForOperationsResearch).

However, I then discovered the Python package
[PyMathProg](http://pymprog.sourceforge.net) which for my purposes is perfect -
it just calls GLPK, but in a nicely "pythonic" manner, and the design of the
package suits me very well.

*** A simple example

Here's a tiny two-dimensional problem I gave to my students:

#+begin_quote
A furniture workshop produces chairs and tables.  Each day 30m^{2} of wood board
is delivered to the workshop, of which chairs require 0.5m^{2} and tables 1.5m^{2}.
(We assume, of course, that all wood is used with no wastage.)  All furniture
needs to be laminated; there is only one machine available for 10 hours per day,
and chairs take 15 minutes each, tables 20 minutes.  If chairs are sold for $30 and
tables for $60, then maximize the daily profit (assuming that all are sold).
#+end_quote

Letting $x$ be the number of chairs, and $y$ be the number of tables, the problem
is to maximize
\[
30x+60y
\]
given

\begin{align*}
0.5x+1.5y&\le 30\\
15x+20y&\le 600\\
x,y&\ge 0
\end{align*}

Problems don't get much simpler than this.  In pyMathProg:

#+begin_src python
import pymathprog as pm
pm.begin('furniture')
# pm.verbose(True)
x, y = pm.var('x, y') # variables
pm.maximize(30 * x + 60 * y, 'profit')
0.5*x + 1.5*y <= 30 # wood
15*x + 20*y <= 600 # laminate
pm.solve()
print('\nMax profit:',pm.vobj())
pm.sensitivity()
pm.end()
#+end_src

with output:

#+begin_src
    GLPK Simplex Optimizer, v4.65
    2 rows, 2 columns, 4 non-zeros
    *     0: obj =  -0.000000000e+00 inf =   0.000e+00 (2)
    *     2: obj =   1.440000000e+03 inf =   0.000e+00 (0)
    OPTIMAL LP SOLUTION FOUND
    
    Max profit: 1440.0
    
    PyMathProg 1.0 Sensitivity Report Created: 2018/10/28 Sun 21:42PM
    ================================================================================
    Variable            Activity   Dual.Value     Obj.Coef   Range.From   Range.Till
    --------------------------------------------------------------------------------
    *x                        24            0           30           20           45
    *y                        12            0           60           40           90
    ================================================================================
    ================================================================================
    Constraint       Activity Dual.Value  Lower.Bnd  Upper.Bnd RangeLower RangeUpper
    --------------------------------------------------------------------------------
     R1                    30         24       -inf         30         20         45
     R2                   600        1.2       -inf        600        400        900
    ================================================================================
#+end_src

From that output, we see that the required maximum is $1440, obtained by making
24 chairs and 12 tables.  We also see that the shadow prices for the constraints
are 24 and 1.2.  Furthermore, the ranges of objective coefficients which will
not affect the results are $[20,45]$ for prices for chairs, and $[40,90]$ for
table prices.

This is the simplest API I've found so far which provides that sensitivity
analysis.

Note that if we just want a solution, we can use the =linprog= command from
=scipy=:

#+begin_src python
from scipy.optimize import linprog
linprog([-30,-60],A_ub=[[0.5,1.5],[15,20]],b_ub=[30,600])
#+end_src

=linprog= automatically minimizes a function, so to maximize we use a negative
function.  The output is

#+begin_src
     fun: -1440.0
 message: 'Optimization terminated successfully.'
     nit: 2
   slack: array([0., 0.])
  status: 0
 success: True
       x: array([24., 12.])
#+end_src

The negative value given as =fun= above simply reflects that we are entering a
negative function.  In respect of our problem, we simply negate that value to
obtain the required maximum of 1440.

** A test of OpenJSCAD
:PROPERTIES:
:EXPORT_FILE_NAME: test_of_openjscad
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :mathjax true
:EXPORT_DATE: 2018-09-15
:END:

Here's an example of a coloured tetrahedron:

#+begin_export html
<script>
<head>
  <link rel="stylesheet" href="css/min.css" type="text/css">
</head>

<body>
  <script src="js/openjscad/min.js"></script>
<!-- setup display of the errors as required by OpenJSCAD.js -->
  <div class="jscad-container">
    <div id="header">
      <div id="errordiv">hello</div>
    </div>

<!-- setup display of the viewer, i.e. canvas -->
    <div oncontextmenu="return false;" 
         id="viewerContext" 
         style = "width:640px;height:470px;"
         design-url="/tetrahedron.jscad"></div>

<!-- setup display of the status, as required by OpenJSCAD.js -->
<!-- set display: block to display this -->
    <div id="tail" style="display: none;">
      <div id="statusdiv"></div>
    </div>
  </div>
</body>
</script>
#+end_export

** The power of two irrational numbers being rational
:PROPERTIES:
:EXPORT_FILE_NAME: powers_of_irrationals
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :mathjax true
:EXPORT_DATE: 2018-09-15
:END:
There's a celebrated elementary result which claims that:
#+begin_quote
There are irrational numbers $x$ and $y$ for which $x^y$ is rational.
#+end_quote
The standard proof goes like this.  Now, we know that $\sqrt{2}$ is irrational,
so let's consider $r=\sqrt{2}^\sqrt{2}$.  Either $r$ is rational, or it is not.
If it is rational, then we set $x=\sqrt{2}$, $y=\sqrt{2}$ and we are done.  If
$r$ is /irrational/, then set $x=r$ and $y=\sqrt{2}$.  This means that 
\[
x^y=\left(\sqrt{2}^\sqrt{2}\right)^{\sqrt{2}}=\sqrt{2}^2=2 
\] 
which is rational.

This is a perfectly acceptable proof, but highly non-constructive,  And for some
people, the fact that the proof gives no information about the irrationality of
$\sqrt{2}^\sqrt{2}$ is a fault.

So here's a lovely /constructive/ proof I found on [reddit](https://www.reddit.com/r/math/comments/9i8lvl/classic/e6hnape) .  Set $x=\sqrt{2}$ and
$y=2\log_2{3}$.  The fact that $y$ is irrational follows from the fact that if
$y=p/q$ with $p$ and $q$ integers, then $2\log_2{3}=p/q$ so that $2^{p/2q}=3$, or
$2^p=3^{2q}$ which contradicts the fundamental theorem of arithmetic.  Then:

\begin{eqnarray*}
x^y&=&\sqrt{2}^{2\log_2{3}}\\
&=&2^{\log_2{3}}\\
&=&3.
\end{eqnarray*}

** Wrestling with Docker
:PROPERTIES:
:EXPORT_FILE_NAME: wrestling_with_docker
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :mathjax true
:EXPORT_DATE: 2018-09-15
:END:
For years I have been running a blog and other web apps on a VPS running Ubuntu
14.04 and Apache - a standard
[LAMP](https://en.wikipedia.org/wiki/LAMP_(software_bundle)) system.  However,
after experimenting with some apps - temporarily installing them and testing
them, only to discard them, the system was becoming a total mess.  Worst of all,
various MySQL files were ballooning out in size: the =ibdata1= file in
=/var/lib/mysql= was coming in at a whopping 37Gb (39568015360 bytes to be more accurate).

Now, there are ways of dealing with this, but I don't want to have to become an
expert in MySQL; all I wanted to do was to recover my system and make it more
manageable.

I decided to use [Docker](www.docker.com).  This is a "container system" where
each app runs in its own container - a sort of mini system which contains all
the files required to serve it up to the web.  This clearly requires a certain
amount of repetition between containers, but that's the price to be paid for
independence.  The idea is that you can start or stop any container without
affecting any of the others.  For web apps many containers are based on [Alpine
Linux](https://alpinelinux.org) which is a system designed to be as tiny as
possible, along with the [nginx](https://www.nginx.com) web server.

There seems to be a sizable ecosystem of tools to help manage and deploy
docker containers.  Given my starting position of knowing nothing, I wanted to
keep my extra tools to a minimum; I went with just two over and above docker
itself: [docker-compose](https://docs.docker.com/compose/), which helps design, configure, and run docker
containers, and [traefik](https://traefik.io), a reverse proxy, which handles all requests from the
outside world to docker containers - thus managing things like ports - as well
as interfacing with the certificate authority [Lets
Encrypt](https://letsencrypt.org).

My hope was that I should be able to get these all set up so they would work as
happily together as they were supposed to do.  And so indeed it has turned out,
although it took many days of fiddling, and innumerable questions to forums and
web sites (such as reddit) to make it work.

So here's my traefik configuration:

#+begin_src toml
defaultEntryPoints = ["http", "https"]

[web]
address = ":8080"
  [web.auth.basic]
  users = ["admin:$apr1$v7kJtvT7$h0F7kxt.lAzFH4sZ8Z9ik."]

[entryPoints]
  [entryPoints.http]
  address = ":80"
    [entryPoints.http.redirect]
      entryPoint = "https"
  [entryPoints.https]
  address = ":443"
    [entryPoints.https.tls]

[traefikLog]
  filePath="./traefik.log"
  format = "json"


# Below here comes from
#   www.smarthomebeginner.com/traefik-reverse-proxy-tutorial-for-docker/
# with values adjusted for local use, of course

# Let's encrypt configuration
[acme]
email="amca01@gmail.com"
storage="./acme.json"
acmeLogging=true 
onHostRule = true
entryPoint = "https"
  # Use a HTTP-01 acme challenge rather than TLS-SNI-01 challenge
  [acme.httpChallenge]
  entryPoint = "http"

[[acme.domains]]
  main = "numbersandshapes.net"
  sans = ["monitor.numbersandshapes.net", "adminer.numbersandshapes.net", "portainer.numbersandshapes.net", "kanboard.numbersandshapes.net", "webwork.numbersandshapes.net",
 "blog.numbersandshapes.net"]

# Connection to docker host system (docker.sock)
[docker]
endpoint = "unix:///var/run/docker.sock"
domain = "numbersandshapes.net"
watch = true
# This will hide all docker containers that don't have explicitly set label to "enable"
exposedbydefault = false
#+end_src

and (part of) my docker-compose configuration, the file =docker-compose.yml=:
#+begin_src yml
version: "3"

networks:
  proxy:
    external: true
  internal:
    external: false

services:

  traefik:
    image: traefik:1.6.0-alpine
    container_name: traefik
    restart: always
    command: --web --docker --logLevel=DEBUG
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - $PWD/traefik.toml:/traefik.toml
      - $PWD/acme.json:/acme.json
    networks:
      - proxy
    ports:
      - "80:80"
      - "443:443"
    labels:
      - traefik.enable=true
      - traefik.backend=traefik
      - traefik.frontend.rule=Host:monitor.numbersandshapes.net
      - traefik.port=8080
      - traefik.docker.network=proxy

  blog:
    image: blog
    volumes:
      - /home/amca/docker/whats_this/public:/usr/share/nginx/html
    networks:
      - internal
      - proxy
    labels:
      - traefik.enable=true
      - traefik.backend=blog
      - traefik.docker.network=proxy      
      - traefik.port=80
      - traefik.frontend.rule=Host:blog.numbersandshapes.net
#+end_src
The way this works, at least in respect of this blog, is that files copied into
the directory =/home/amca/docker/whats_this/public= on my VPS will be
automatically served by nginx.  So all I now need is a command on my local
system (on which I do all my blog writing), which serves up these files.  I've
called it =docker-deploy=:

#+begin_src
hugo -b "https://blog.numbersandshapes.net/" -t "blackburn" && rsync -avz -e "ssh" --delete public/ amca@numbersandshapes.net:~/docker/whats_this/public
#+end_src
Remarkably enough, it all works!

One issue I had at the beginning was that my original blog was served up at the
URL =https://numberdsandshapes.net/blog= and for some reason these links were
still appearing in my new blog.  It turned out (after a lot of anguished
messages) that it was my mis-handling of =rsync=.  I just ended up deleting
everything except for the blog source files, and re-created everything from scratch.

** Householder's methods                     :mathematics:algebra:
:PROPERTIES:
:EXPORT_FILE_NAME: Householders_methods
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :mathjax true
:EXPORT_DATE: 2018-09-09
:END:
These are a class of root-finding methods; that is, for the numerical solution
of a single nonlinear equation,
developed by [Alston Scott
Householder](https://en.wikipedia.org/wiki/Alston_Scott_Householder)
in 1970. They may be considered a generalisation of the well known [Newton-Raphson
method](https://en.wikipedia.org/wiki/Newton's_method) (also known more simply
as /Newton's method/) defined by

\[
x\leftarrow x-\frac{f(x)}{f'(x)}.
\]

where the equation to be solved is $f(x)=0$.

From a starting value $x_0$ a sequence of iterates can be generated by

\[
x_{n+1}=x_n-\frac{f(x_n)}{f'(x_n)}.
\]

As is well known, Newton's method exhibits /quadratic convergence/; that is, if
the sequence of iterates converges to a root value $r$, then the
limit

\[
\lim_{n\to\infty}\frac{x_{n+1}-r}{(x_n-r)^2}
\]

is finite.  This means, in effect, that the number of correct decimal places
doubles at each step.  Householder's method for a rate of convergence $d+1$ is
defined by

\[
x\leftarrow x-d\frac{(1/f)^{(d-1)}(x)}{(1/f)^{(d)}(x)}.
\]

We show how this definition can be rewritten in terms of ratios of derivatives,
by using Python and its symbolic toolbox [SymPy](https://www.sympy.org/en/index.html).

We start by defining some variables and functions.

#+begin_src python
from sympy import *
x = Symbol('x')
f = Function('f')(x)
#+end_src

Now we can define the first Householder formula, with $d=1$:

#+begin_src python
d = 1
H1 = x + d*diff(1/f,x,d-1)/diff(1/f,x,d)
H1
#+end_src

\[
x-\frac{f(x)}{\frac{d}{dx}f(x)}
\]

which is Newton's formula.  Now for $d=2$:

#+begin_src python
d = 2
H2 = x + d*diff(1/f,x,d-1)/diff(1/f,x,d)
H2
#+end_src

\[
x - \frac{2 \frac{d}{d x} f{\left (x \right )}}{- \frac{d^{2}}{d x^{2}}  f{\left (x \right )} + \frac{2 \left(\frac{d}{d x} f{\left (x \right )}\right)^{2}}{f{\left (x \right )}}}
\]

This is a mighty messy formula, but it can be greatly simplified by using ratios
of derivatives defined by

\[
r_k=\frac{f^{(d-1}(x)}{f^{(d)}(x)}
\]
This means that
\[
r_1=\frac{f}{f'},\quad r_2=\frac{f'}{f^{\prime\prime}}
\]
To make the substitution into the current expression above, we can use the
substitutions
\[
f^{\prime\prime}=f'/r_2,\quad f'=f/r_1
\]
to be done sequentially (first defining the new symbols)
#+begin_src python
r_1,r_2,r_3 = symbols('r_1,r_2,r_3')
H2r = H2s.subs([(Derivative(f,x,2), Derivative(f,x)/r_2), (Derivative(f,x), f/r_1)]).simplify()
H2r
#+end_src
\[
-\frac{2r_1r_1}{r_1-2r_2}
\]
Dividing the top and bottom by $2r_2$ produces the formulation
\[
\frac{r_1}{1-\displaystyle{\frac{r_1}{2r_2}}}
\]
and so Householder's method for $d=2$ is defined by the recurrence
\[
x\leftarrow x-\frac{r_1}{1-\displaystyle{\frac{r_1}{2r_2}}}.
\]
This is known as [Halley's
method](https://en.wikipedia.org/wiki/Halley's_method), after [Edmond
Halley](https://en.wikipedia.org/wiki/Edmond_Halley), also known for his comet.
This method has been called the most often rediscovered iteration formula in the
literature.

It would exhibit /cubic convergence/, which means that the number of correct
figures roughly triples at each step.

Apply the same sequence of steps for $d=3$, and including the substitution
\[
f^{\prime\prime\prime} = f^{\prime\prime}/r_3
\]
produces the fourth order formula
\[
x\leftarrow x-\frac{3 r_{1} r_{3} \left(2r_{2} - r_{1}\right)}{r_{1}^{2} - 6 r_{1} r_{3} + 6 r_{2} r_{3}}
\]

*** A test

We'll use the equation
\[
x^5+x-1=0
\]
which has a root close to $0.7$.  First Newton's method, which is the
Householder method of order $d=1$, and we start by defining the symbol $x$ and
the function $f$:

#+begin_src python
x = Symbol('x')
f = x**5+x-1
#+end_src

Next define the iteration of Newton's method, which can be turned into a function with the handy tool
=lambdify=:

#+begin_src python
nr = lambdify(x, x - f/diff(f,x))
#+end_src

Now, a few iterations, and print them as strings:

#+begin_src python
y = 0.7
ys = [y]
for i in range(10):
    y = N(nr(y),100)
    ys += [y]

for i in ys:
    print(str(i))

0.7
0.7599545557827765973613054484303575009107589721679687500000000000000000000000000000000000000000000000
0.7549197891599746887794253559985793967456078439525201893202319456623650882121929457935763902468565963
0.7548776691557956141971506438033504033307707534709697222674827264390889507161368160254597915269779252
0.7548776662466927739251146002523856449587324643131536407777773148939177229546284200355119465808326870
0.7548776662466927600495088963585290075677963335246916447723036615900830138144428153523526591809355834
0.7548776662466927600495088963585286918946066177727931439892839706462440390043279509776806970677946058
0.7548776662466927600495088963585286918946066177727931439892839706460806551280810907382270928422503037
0.7548776662466927600495088963585286918946066177727931439892839706460806551280810907382270928422503037
0.7548776662466927600495088963585286918946066177727931439892839706460806551280810907382270928422503037
0.7548776662466927600495088963585286918946066177727931439892839706460806551280810907382270928422503037
#+end_src
We can easily compute the number of correct decimal places each time by simply
finding the first place in each string where it differs from the previous one:

#+begin_src python
for i in range(1,7):
    d = [ys[i][j] == ys[i+1][j] for j in range(102)]
    print(d.index(False)-2)
#+end_src

\begin{array}{r}
2\cr 
3\cr 
8\cr 
16\cr 
32\cr 
66
\end{array}

and we see a remarkable closeness with doubling of the number of correct values
each iteration.

Now, the fourth order method, with $d=3$:

#+begin_src python
r1 = lambdify(x,g(x)/diff(g(x),x))
r2 = lambdify(x,diff(g(x),x)/diff(g(x),x,2))
r3 = lambdify(x,diff(g(x),x,2)/diff(g(x),x,3))
h3 = lambdify(x,x-3*r1(x)*r3(x)*(2*r2(x)-r1(x))/(r1(x)**2-6*r1(x)*r3(x)+6*r2(x)*r3(x)))
#+end_src

Now we basically copy down the above commands, except that we'll use 1500 decimal
places instead of 100:

#+begin_src python
y = 0.7
ys = [str(x)]
for i in range(10):
    y = N(h3(x),1500)
    ys += [str(y)]

for i in range(1,6):
    d = [xs[i][j] == xs[i+1][j] for j in range(1502)]
    print(d.index(False)-2)
#+end_src

\begin{array}{r}
4\\
19\\
76\\
308\\
1233
\end{array}

and we that the number of correct decimal places at each step is indeed
increased by a factor very close to 4.

** The Joukowsky Transform                   :mathematics:geometry:jsxgraph:
:PROPERTIES:
:EXPORT_FILE_NAME: joukowsky-transform
:EXPORT_DATE: 2018-08-24
:END:
The [Joukowksy Transform](https://en.wikipedia.org/wiki/Joukowsky_transform) is
an elegant and simple way to create an airfoil shape.  

Let $C$ be a circle in the complex plane that passes through the point $z=1$ and
encompasses the point $z=-1$.  The transform is defined as

\[
\zeta=z+\frac{1}{z}.
\]

We can explore the transform by looking at the circles centred at $(-r,0)$ with
$r<0$ and with radius $1+r$:

\[
\|z-r\|=1+r
\]

or in cartesian coordinates with parameter $t$:

\begin{align*}
x &= -r+(1+r)\cos(t)\\
y &= (1+r)\sin(t)
\end{align*}
so that
\[
(x,y)\rightarrow \left(x+\frac{x}{x^2+y^2},y-\frac{y}{x^2+y^2}\right).
\]

To see this in action, move the point $P$ in this diagram about, ensuring that
the point $(-1,0)$ always remains within the circle:

#+begin_export html
<div id="box" class="jxgbox" style="width:750px; height:600px;">
<script type="text/javascript">
 var board = JXG.JSXGraph.initBoard('box', {boundingbox: [-3, 2.4, 1.6, -2], 
                                            axis:true,
                                            keepAspectRatio:true});
 var p1 = board.create('point', [-1, 0], {size: 4,name: 'P'});
 var midpt = board.create('point', [function(){ return (p1.X()+1)/2.0; }, 
                                    function(){ return p1.Y()/2.0; }], {name:'',size: 0});
 var c = board.create('circle',[midpt, p1]);
 function fx(s) {
  return midpt.X()+c.Radius()*Math.cos(s);
 }
 function fy(s) {
  return midpt.Y()+c.Radius()*Math.sin(s);
 }
 function gx(t) {
  return fx(t)+fx(t)/(fx(t)*fx(t)+fy(t)*fy(t));
 }
 function gy(t) {
       return fy(t)-fy(t)/(fx(t)*fx(t)+fy(t)*fy(t));
      }
 var foil = board.create('curve',[function(phi){return gx(phi);},
                                  function(phi){return gy(phi);}, 
                                  0, 2*Math.PI], 
                                  {strokeColor: 'green',strokeWidth: 4,name:''});
</script>
</div>
#+end_export

** Double Damask
:PROPERTIES:
:EXPORT_FILE_NAME: double-damask
:EXPORT_DATE: 2018-04-27
:END:
This was a comedy sketch initially performed in the revue ["Clowns in
Clover"](http://www.guidetomusicaltheatre.com/shows_c/clownsclover.htm) which
had its first performance at the Adelphi Theatre in London on December 1, 1927.
This particular sketch was written by [Dion
Titheradge](http://en.wikipedia.org/wiki/Dion_Titheradge) and starred the
inimitable [Cicely
Courtneidge](https://en.wikipedia.org/wiki/Cicely_Courtneidge) as the annoyed
customer Mrs Spooner.  It has been recorded and is available on many different
collections; you can also hear it on
[youtube](https://www.youtube.com/watch?v=0P8XSUGSR-c).

I have loved this sketch since I first heard it as a teenager on a three record
collection called something like "Masters of Comedy", being a collection of
classic sketches.  Double Damask has also been performed by Beatrice Lillie, and
you can search for this also on youtube.  For example,
[here](https://www.youtube.com/watch?v=GiRyqDfNxqU).  I hope admirers of the
excellent Ms Lillie will not be upset by my saying I far prefer Cicely
Courtneidge, whose superb diction and impeccable comic timing are beyond
reproach.

No doubt the original script is available somewhere, but in the annoying way of
the internet, I couldn't find it.  So here is my transcription of the
Courtneidge version of "Double Damask".

---

*Double Damask*

written by

Dion Titheradge

/Characters:/\
A customer, Mrs Spooner\
A shop assistant (unnamed)\
A manager, Mr Peters

/Scene:/ The linen department of a large store.

MRS SPOONER: I wonder if you could tell me if my order has gone off yet?

ASSISTANT: Not knowing your order, madam, I really couldn't say.

MRS SPOONER: But I was in here an hour ago and gave it to you.

ASSISTANT: What name, madam?

MRS SPOONER: Spooner, Mrs Spooner,

ASSISTANT: Have you an address?

MRS SPOONER: Do I look as if I live in the open air? I gave a large order for
sheets and tablecloths, to be sent to Bacon Villa, Egham.  (pronounced "Eg'm")

ASSISTANT: Eg'm?

MRS SPOONER: I hope I speak plainly: Egg Ham!

ASSISTANT: Oh yes, yes I remember perfectly now, Madam.  Let me see now... no,
your order won't go through until tomorrow morning.  Is there anything further?

MRS SPOONER: Yes, (very quickly) I want two dozen double damask dinner napkins.

ASSISTANT: I beg your pardon?

MRS SPOONER (as quicky as before): I said two dozen double damask dinner napkins.

ASSISTANT: I'm sorry madam, I don't quite catch -

MRS SPOONER: Dinner napkins, man! Dinner napkins!

ASSISTANT: Of course madam.  Plain?

MRS SPOONER: Not plain, double damask.

ASSISTANT: Yes... would you mind repeating your order Madam? I'm not quite sure.

MRS SPOONER: I want two dozen dammle dubbuck; I want two dammle dubb... oh dear,
stupid of me!  I want two dozen dammle dizzick danner nipkins.

ASSISTANT: Danner nipkins Madam?

MRS SPOONER: Yes.

ASSISTANT: You mean dinner napkins.

MRS SPOONER: That's what I said.

ASSISTANT: No, pardon me, Madam, you said danner nipkins!

MRS SPOONER: Don't be ridiculous!  I said dinner napkins, and I meant danner
nipkins.  Nipper dank...you know you're getting me muddled now.

ASSISTANT: I'm sorry Madam.  You want danner nipkins, exactly.  How many?

MRS SPOONER: Two duzzle.

ASSISTANT: Madam?

MRS SPOONER: Oh, gracious, young man - can't you get it right?  I want two dubbin duzzle
damask dinner napkins.

ASSISTANT: Oh no, Madam, not two dubbin - you mean two dozen!

MRS SPOONER: I said two dozen!  Only they must be dammle duzzick!

ASSISTANT: No, we haven't any of that in stock, Madam.

MRS SPOONER (in a tone of complete exasperation): Oh dear, of all the fools!
Can't I find anybody, just anybody with a modicum of intelligence in this store?

ASSISTANT: Well, here is our Mr Peters, Madam. Now perhaps if you ask him he might-

MR PETERS (In an authoritative "we can fix anything" kind of voice): Can I be of
any assistance to you, Madam?

MRS SPOONER: I'm sorry to say that your assistant doesn't appear to speak
English.  I'm giving an order, but it might just as well be in Esperanto for all
he understands.

MR PETERS: Allow me to help you Madam.  You require?

MRS SPOONER: I require (as quickly as before) two dozen double damask dinner napkins.

MR PETERS: I beg pardon, Madam?

MRS SPOONER: Oh heavens - can't you understand?

MR PETERS: Would you mind repeating your order, Madam.

MRS SPOONER: I want two dazzen -

MR PETERS: Two dozen!

MRS SPOONER: I said two dozen!

MR PETERS: Oh no no Madam - no, you said two dazzen.  But I understand perfectly
what you mean.  You mean two dozen; in other words - a double dozen.

MRS SPOONER: That's it! A duzzle dubbin double damask dinner napkins.

MR PETERS: Oh no, pardon me, Madam, pardon me: you mean a double dozen double dummick
dinner napkins.

ASSISTANT: Double damask, sir.

MR PETERS: I said double damask!  It's... dapper ninkins you require, sir.

MRS SPOONER: Please get it right, I want dinner napkins, dinner napkins.

MR PETERS: I beg pardon, Madam. So stupid of me...one gets so confused...  (Laughs)

MRS SPOONER: It is not a laughing matter.

MR PETERS: Of course.  Dipper nankins, madam.

ASSISTANT: Dapper ninkins, sir.

MRS SPOONER: Danner nipkins.

MR PETERS: I understand exactly what Madam wants.  It is two d-d-d-d-..two d- Would you
mind repeating your order please, Madam?

MRS SPOONER: Ohhh, dear.. I want two duzzle dizzen damask dinner dumplings!

MR PETERS: Allow me, Madam, allow me.  The lady requires (quickly) two dubbin
double damask dunner napkins.

ASSISTANT: Dunner napkins sir?

MR PETERS: Certainly!  Two dizzen.

MRS SPOONER: Not two dizzen - I want two dowzen!

MR PETERS: Quite so, Madam, quite so.  If I may say so we're getting a little
bit confused, splitting it up, as it were.  Now, the full order, the full order,
is two dazzen dibble dummisk n'dipper dumkins.

ASSISTANT: Excuse me, sir, you mean two dummen dammle dimmick dizzy napkins.

(The next four four lines are spoken almost on top of each other)

MRS SPOONER: I do not want dizzy napkins, I want two dizzle dammen damask -

MR PETERS: No - two dizzle dammle dizzick!

ASSISTANT: Two duzzle dummuck dummy!

MRS SPOONER: Two damn dizzy diddle dimmer dipkins!

MR PETERS (Shocked): Madam, Madam!  Please, please - your language!

MRS SPOONER: Oh, blast.  Give me twenty four serviettes.

** Graphs of Eggs                               :geometry:jsxgraph:
:PROPERTIES:
:EXPORT_FILE_NAME: egg_graphs
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :mathjax true
:EXPORT_DATE: 2018-04-20
:END:
I recently came across some nice material on [John Cook's
blog](https://www.johndcook.com/blog/) about equations that described eggs.

It turns out there are vast number of equations whose graphs are egg-shaped:
that is, basically ellipse shape, but with one end "rounder" than the other.

You can see lots at Jürgen Köller's [Mathematische
Basteleien](http://www.mathematische-basteleien.de/eggcurves.htm) page.
(Although this blog is mostly in German, there are enough English language pages
for monoglots such as me).  And plenty of egg equations can be found in the
[2dcurves](http://www.2dcurves.com/) pages.  

Another excellent source of eggy equations is [TDCC
Laboratory](http://www.geocities.jp/nyjp07/index_egg_E.html) from Japan (the
link here is to their English language page).  For the purposes of experimenting
we will use equations from this TDCC, adjusted as necessary.  Many of their
equations are given in parametric form, which means they can be easily graphed
and explored using [JSXGraph](https://jsxgraph.org/wp/index.html).

The first set of parametric equations, whose author is given to be Nobuo
Yamamoto, is:

\begin{align*}
x&=(a+b+b\cos\theta)\cos\theta\\
y&=(a+b\cos\theta)\sin\theta
\end{align*}

If we divide these equations by $a$, and use the parameter $c$ for $b/a$ we
obtain slightly simpler equations:

\begin{align*}
x&=(1+c+c\cos\theta)\cos\theta\\
y&=(1+c\cos\theta)\sin\theta
\end{align*}

Here you can explore values of $c$ between 0 and 1:

#+begin_export html
<div id="box" class="jxgbox" style="width:750px; height:375px;">
<script type="text/javascript">
 var board = JXG.JSXGraph.initBoard('box', {boundingbox: [-2, 2, 4, -1.5], axis:true,keepAspectRatio:true});
 var c = board.create('slider',[[1,1.5],[3,1.5],[0,0,1]],{name:'c'});
 var egg = board.create('curve',
                       [function(t){ return (1+c.Value()+c.Value()*Math.cos(t))*Math.cos(t);},
                        function(t){ return (1+c.Value()*Math.cos(t))*Math.sin(t);},
                        0, 2*Math.PI],{strokeWidth:4}
                        );

</script>
</div>
#+end_export

Another [set of equations](http://www.geocities.jp/nyjp07/index_egg_by_Itou_E.html) is said to be due to [Tadao
Ito](http://web1.kcn.jp/hp28ah77/us_author.htm) (whose surname is sometimes
transliterated as Itou):

\begin{align*}
x&=\cos\theta\\
y&=c\cos\frac{\theta}{4}\sin\theta
\end{align*}

#+begin_export html
<div id="box2" class="jxgbox" style="width:500px; height:375px;">
<script type="text/javascript">
 // var board2 = JXG.JSXGraph.freeBoard(board2); 
 var board2 = JXG.JSXGraph.initBoard('box2', {boundingbox: [-1.5, 1.5, 2, -1.5], axis:true,keepAspectRatio:true});
 var c2 = board2.create('slider',[[0.25,1.25],[1.75,1.25],[0,0,1.5]],{name:'c'});
 var egg2 = board2.create('curve',
                       [function(t){ return Math.cos(t);},
                        function(t){ return c2.Value()*Math.cos(t/4)*Math.sin(t);},
                        -Math.PI, Math.PI],{strokeWidth:4}
                        );

</script>
</div>
#+end_export

Many more equations: parametric, implicit, can be found at the sites linked above.

** Exploring JSXGraph                                    :jsxgraph:
:PROPERTIES:
:EXPORT_FILE_NAME: exploring_jsxgraph
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :mathjax true
:EXPORT_DATE: 2018-04-14
:END:

[JSXGraph](https://jsxgraph.org/wp/index.html) is a graphics package deveoped in
Javascript, and which seems to be tailor-made for a static blog such as this.
It consists of only two files: the javascript file itself, and an accompanying
css file, which you can download.   Alternaively you can simply link to the
online files at the Javascript content delivery site
[cdnjs](https://cdnjs.com/about) managed by
[cloudflare](https://www.cloudflare.com/).  There are cloudflare servers all
over the world - even in my home town of Melbourne, Australia. 

So I modified the =head.html= file of my theme to include a link to the
necessary files:

So I downloaded the javascript and css files as described
[here](https://jsxgraph.uni-bayreuth.de/wp/download/index.html)
and also, for good measure, added the script line (from that page) to the
=layouts/partials/head.html= file of the theme.  Then copied the following 
snippet from the JSXGraph site:

#+begin_src html
<div id="box" class="jxgbox" style="width:500px; height:500px;"></div>
<script type="text/javascript">
 var board = JXG.JSXGraph.initBoard('box', {boundingbox: [-10, 10, 10, -10], axis:true});
</script>
#+end_src

However, to make this work the entire script needs to be inside a =<div>=,
=</div>= pair, like this:

#+begin_src html
<div id="box" class="jxgbox" style="width:500px; height:500px;">
<script type="text/javascript">
 var board = JXG.JSXGraph.initBoard('box', {boundingbox: [-10, 10, 10, -10], axis:true});
</script>
</div>
#+end_src

Just to see how well this works, here's Archimedes' /neusis/ construction of an
angle trisection: given an angle $\theta$ in a unit semicircle, its trisection is
obtained by laying against the circle a straight line with points spaced 1
apart (drag point A about the circle to see this in action):
#+begin_export html 
<div id="box" class="jxgbox" style="width:750px; height:500px;">
<script type="text/javascript">
 JXG.Options.axis.ticks.insertTicks = false;
 JXG.Options.axis.ticks.drawLabels = false;
 var board = JXG.JSXGraph.initBoard('box', {boundingbox: [-1.5, 1.5, 3, -1.5],axis:true,keepAspectRatio:true});
 var p = board.create('point',[0,0],{visible:false,fixed:true});
 var neg = board.create('point',[-0.67,0],{visible:false,fixed:true});
 var c = board.create('circle',[[0,0],1.0]);
 var a = board.create('glider',[-Math.sqrt(0.5),Math.sqrt(0.5),c],{name:'A'});
 var l1 = board.create('segment',[a,p]);
 var ang = board.create('angle',[a,p,neg],{radius:0.67,name:'θ',type:'sector'});
 var theta = JXG.Math.Geometry.rad(a,p,neg);
 var bb = board.create('point',[
          () => Math.cos(Math.atan2(a.Y(),-a.X())/3),
          () => Math.sin(Math.atan2(a.Y(),-a.X())/3)
          ],{name:'B'});
 var w = board.create('point',[() =>  2*Math.cos(Math.atan2(a.Y(),-a.X())/3),0]);
 var l2 = board.create('line',[a,w]);
 var l3 = board.create('segment',[p,bb]);
 var l4 = board.create('segment',[bb,w],{strokeWidth:6,strokeColor:'#FF0000'});
 var ang2 = board.create('angle',[bb,w,neg],{radius:0.67,name:'θ/3'});
</script> 
</div>
#+end_export

For what it's worth, here is the splendid javascript code to produce the above
figure:

#+begin_src html
<div id="box" class="jxgbox" style="width:500px; height:333.33px;">
<script type="text/javascript">
 JXG.Options.axis.ticks.insertTicks = false;
 JXG.Options.axis.ticks.drawLabels = false;
 var board = JXG.JSXGraph.initBoard('box', {boundingbox: [-1.5, 1.5, 3, -1.5],axis:true});
 var p = board.create('point',[0,0],{visible:false,fixed:true});
 var neg = board.create('point',[-0.67,0],{visible:false,fixed:true});
 var c = board.create('circle',[[0,0],1.0]);
 var a = board.create('glider',[-Math.sqrt(0.5),Math.sqrt(0.5),c],{name:'A'});
 var l1 = board.create('segment',[a,p]);
 var ang = board.create('angle',[a,p,neg],{radius:0.67,name:'θ'});
 var theta = JXG.Math.Geometry.rad(a,p,neg);
 var bb = board.create('point',[function(){return Math.cos(Math.atan2(a.Y(),-a.X())/3);},function(){return Math.sin(Math.atan2(a.Y(),-a.X())/3);}],{name:'B'});
 var w = board.create('point',[function(){return Math.cos(Math.atan2(a.Y(),-a.X())/3)/0.5;},0]);
 var l2 = board.create('line',[a,w]);
 var l3 = board.create('segment',[p,bb]);
 var l4 = board.create('segment',[bb,w],{strokeWidth:6,strokeColor:'#FF0000'});
 var ang2 = board.create('angle',[bb,w,neg],{radius:0.67,name:'θ/3'});
</script> 
</div>
#+end_src

Quite wonderful, it is.

** The trinomial theorem                      :mathematics:algebra:
:PROPERTIES:
:EXPORT_FILE_NAME: trinomial_theorem
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :mathjax true
:EXPORT_DATE: 2018-04-05
:END:
When I was teaching the binomial theorem (or, to be more accurate, the binomial
/expansion/) to my long-suffering students, one of them asked me if there was a
/trinomial/ theorem.  Well, of course there is, although in fact expanding sums
of greater than two terms is generally not classed as a theorem described by the
number of terms. The general result is

\[
(x_1+x_2+\cdots+x_k)^n=\sum_{a_1+a_2+\cdots+a_k=n}
{n\choose a_1,a_2,\ldots,a_k}x_1^{a_1}x_2^{a_2}\cdots x_k^{a_k}
\]

so in particular a "trinomial theorem" would be

\[
(x+y+z)^n=\sum_{a+b+c=n}{n\choose a,b,c}x^ay^bz^c.
\]

Here we define

\[
{n\choose a,b,c}=\frac{n!}{a!b!c!}
\]

and this is known as a /trinomial coefficient/; more generally, for an arbitrary
number of variables, it is a /multinomial coefficient/.  It is guaranteed to be
an integer if the lower values sum to the upper value.

So to compute $(x+y+z)^5$ we could list all integers $a,b,c$ with $0\le a,b,c\le 5$
for which $a+b+c=5$, and put them all into the above sum.  

But of course there's a better way, and it comes from expanding $(x+y+z)^5$ as a
binomial $(x+(y+z))^5$ so that

\begin{array}{rcl}
(x+(y+x))^5&=&x^5\\
&&+5x^4(y+z)\\
&&+10x^3(y+z)^2\\
&&+10x^2(y+z)^3\\
&&+5x(y+z)^4\\
&&+(y+z)^5
\end{array}

Now we can expand each of those binomial powers:

\begin{array}{rcl}
(x+(y+x))^5&=&x^5\\
&&+5x^4(y+z)\\
&&+10x^3(y^2+2yz+z^2)\\
&&+10x^2(y^3+3y^2z+3yz^2+z^3)\\
&&+5x(y^4+4y^3z+6y^2z^2+4yz^3+z^4)\\
&&+(y^5+5y^4z+10y^3z^2+10y^2z^3+5yz^4+z^5)
\end{array}

Expanding this produces

\begin{split}
x^5&+5x^4y+5x^4z+10x^3y^2+20x^3yz+10x^3z^2+10x^2y^3+30x^2y^2z+30x^2yz^3\\
&+10x^2z^3+5zy^4+20xy^3z+30xy^2z^2+20xyz^3+5xz^4+y^5+5y^4z+10y^3z^2\\
&+10y^2z^3+5yz^4+z^5
\end{split}

which is an equation of rare beauty.

But there's a nice way of setting this up, which involves writing down Pascal's
triangle to the fifth row, and putting a fifth row, as a column, on the side.
Then multiply across:

\begin{array}{lcccccccccc}
1&&&&&&1&&&&&\\
5&&&&&1&&1&&&&\\
10\quad\times&&&&1&&2&&1&&&\\
10&&&1&&3&&3&&1&&\\
5&&1&&4&&6&&4&&1&\\
1&1&&5&&10&&10&&5&&1
\end{array}

to produce the final array of coefficients (with index numbers at the left):

\begin{array}{l*{10}{c}}
0\qquad{}&&&&&&1&&&&&\\
1&&&&&5&&5&&&&\\
2&&&&10&&20&&10&&&\\
3&&&10&&30&&30&&10&&\\
4&&5&&20&&30&&20&&5&\\
5&1&&5&&10&&10&&5&&1
\end{array}

Row $i$ of this array corresponds to $x^{5-i}$ and all combinations of powers
$y^bz^c$ for $0\le b,c\le i$.  Thus for example the fourth row down,
corresponding to \( i=3 \), may be considered as the coefficients of the terms

\[
x^2y^3,\quad x^2y^2z,\quad x^2yz^2,\quad xz^3.
\]

Note that the triangle of coefficients is symmetrical along all three centre
lines, as well as rotationally symmetric by 120°.  

** Playing with Hugo                                     :hugo:org:
:PROPERTIES:
:EXPORT_FILE_NAME: playing_with_Hugo
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :mathjax true
:EXPORT_DATE: 2018-04-03
:END:
I've been using wordpress as my blogging platform since I first started, about
10 years ago.  (In fact the first post I can find is dated March 30, 2008.)  I
chose [wordpress.com](http://wordpress.com) back then because it was (a) free,
and (b) supported mathematics through a version (or subset) of
[LaTeX](https://www.latex-project.org).  As I have used LaTeX extensively for
all my writing since the early 1990's, it's a standard requirement for me.

Some time later I decided to start hosting my own server (well, a VPS), on which
I could use [wordpress.org](https://wordpress.org), which is the self-hosted
version of wordpress.  The advantages of a self hosted blog are many, but I
particularly like the greater freedom, the ability to include a far greater
variety of plugins, and the larger choice of themes.  And one of the plugins I
liked particularly was [WP
QuickLaTeX](https://wordpress.org/plugins/wp-quicklatex/) which provided a LaTeX
engine far superior to the in-built one of wordpress.com.  Math bloggin heaven!

However, hosting my own wordpress site was not without difficulty.  First I had
to install it and get it up and running (even this was non-trivial), and then I
had to manage all the users and passwords: myself as a standard user, wp-admin
for accessing the Wordpress site itself, a few others.  I have quite a long list
containing all the commands I used, and all the users and passwords I created.

This served me well, but it was also slow to use.  My VPS is perfectly
satisfactory, but it is not fast (I'm too cheap to pay for much more than a
low-powered one), and the edit-save-preview cycle of online blogging with my
wordpress installation was getting tiresome.  

Plus the issue of security.  I've been hacked once, and I've since managed to
secure my site with a free certificate from [Let's
Encrypt](https://letsencrypt.org).  In fact, in many ways Let's Encrypt is one
of the best things to have happened for security.  An open Certificate Authority
is manna from heaven, as far as I'm concerned.

Wordpress is of course more than just blogging software.  It now grandly styles
itself as Site Building software and Content Management System, and the site
claims that "30% of the web uses Wordpress".  It is in fact hugely powerful and
deservedly popular, and can be used for pretty much whatever sort of site you
want to build.   Add to that a seemingly infinite set of plugins, and you have
an entire ecosystem of web-building.

However, all of that popularity and power comes at a cost: it is big, confusing,
takes work to maintain, keep secure, and keep up-to-date, and is a target for
hackers.  Also for me, it has become colossal overkill.  I don't need all those
bells and whistles; all I want to do is host my blog and share my posts with the
world (the $1.5\times 10^{-7}\%$ of the world who reads it).

The kicker for me was checking out a [mathematics education
blog](http://rtalbert.org) by an author I admire greatly, to discover it was
built with the static blog engine [jekyll](https://jekyllrb.com).  So being the
inventive bloke I am, I thought I'd do the same.

But a bit of hunting led me to [Hugo](https://gohugo.io), which apparently is
very similar to jekyll, but much faster, and written in [Go](https://golang.org)
instead of [Ruby](https://www.ruby-lang.org/en/).  Since I know nothing about
either Go or Ruby I don't know if it's the language which makes the difference,
or something else.  But it sure looks nice, and supports
[mathjax](https://www.mathjax.org) for LaTeX.

So my current plan is to migrate from wordpress to Hugo, and see how it goes!
** Python GIS, and election results                 :python:voting:
:PROPERTIES:
:EXPORT_FILE_NAME: python_GIS
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :mathjax true
:EXPORT_DATE: 2018-03-31
:END:
*** Election mapping

A few weeks ago there was a by-election in my local electorate (known as an
electoral /division/) of Batman here in Australia.  I was interested in
comparing the results of this election with the previous election two years ago.
In this division it's become a two-horse race: the Greens against the Australian
Labor Party.  Although Batman had been a solid Labor seat for almost its entire
existence - it used to be considered one of the safest Labor seats in the
country - over the past decade or so the Greens have been making inroads into
this Labor heartland, to the extent that is no longer considered a safe seat.
And in fact for this particular election the Greens were the popular choice to
win.  In the end Labor won, but my interest is not so much tracing the votes,
but trying to map them.

Python has a vast suite of mapping tools, so much so that it may be that Python
has become the GIS tool of choice.  And there are lots of web pages devoted to
discussing these tools and their uses, such as [this
one](http://matthewrocklin.com/blog/work/2017/09/21/accelerating-geopandas-1).

My interest was producing maps such as are produced by
[pollbludger](https://www.pollbludger.net/by-elections/fed-2018-03-batman.htm)
This is the image from that page:

![pollbludger](/pollbludger_batman.png)

As you can see there are basically three elements:

 * the underlying streetmap
 * the border of the division
 * the numbers showing the percentage wins of each party at the various polling
    booths.

I wanted to do something similar, but replace the numbers with circles whose
sizes showed the strength of the percentage win at each place.

*** Getting the information

Because this election was in a federal division, the management of the polls and
of the results (including counting the votes) was managed by the Australian
Electoral Commission, whose [pages about this by-election](
http://www.aec.gov.au/Elections/supplementary_by_elections/2018-batman/) contain
pretty much all publicly available information.  You can copy and paste the
results from their pages, or download them as CSV files.

Then I needed to find the coordinates (Longitude and Latitude) of all the
polling places, of which there were 42 at fixed locations.  There didn't seem to
be a downloadable file for this, so for each booth address (given on the AEC
site), I entered it into Google Maps and copied down the coordinates as given.

The boundaries of all the divisions can again be downloaded from the [AEC GIS
page](http://www.aec.gov.au/Electorates/gis/index.htm).  These are given in
various standard GIS files.

*** Putting it all together

The tools I felt brave enough to use were:

  * [Pandas:](https://pandas.pydata.org) Python's data analysis library.  I
    really only needed to read information from CSV files that I could then use
    later.
  * [Geopandas:](http://geopandas.org) This is a GIS library with Pandas-like
    syntax, and is designed in part to be a GIS extension to Pandas.  I would
    use it to extract and manage the boundary data of the electoral division.
  * [Cartopy:](http://scitools.org.uk/cartopy/) which is a library of
    "cartographic tools".

And of course the standard [matplotlib](http://matplotlib.org) for plotting,
[numpy](http://www.numpy.org) for array handling.

My guides were the [London tube stations
example](http://scitools.org.uk/cartopy/docs/latest/gallery/tube_stations.html)
from Cartopy and a local (Australian) data analysis blog which discussed the
[use of Cartopy](http://www.net-analysis.com/blog/cartopytiles.html) including
adding graphics to an map image.

There are lots of other GIS tools for Python, some of which seem to be very good
indeed, and all of which I downloaded:

  * [Fiona](https://github.com/Toblerity/Fiona): which is a "nimble" API for
    handling maps
  * [Descartes](https://bitbucket.org/sgillies/descartes/): which provides a
    means by which matplotlib can be used to manage geographic objects
  * [geoplotlib](https://github.com/andrea-cuttone/geoplotlib): for "visualizing
    geographical data and making maps"
  * [Folium](http://python-visualization.github.io/folium/): for visualizing maps
    using the [leaflet.js](http://leafletjs.com) library.  It may be that the
    mapping I wanted to do with Python could have been done just as well in
    Javascript alone.  And probably other languages.  I stuck with Python simply
    because I knew it best.
  * [QGIS](https://qgis.org/en/site/): which is designed to be a complete free
    and open source GIS, and with APIs both for Python and C++
  * [GDAL](http://www.gdal.org): the "Geospatial Data Abstraction Library" which
    has a [Python package](https://pypi.python.org/pypi/GDAL) also called GDAL,
    for manipulating geospatial raster and vector data.

I suspect that if I was professionally working in the GIS area some or all of
these packages would be at least as - and maybe even more - suitable than the
ones I ended up using.  But then, I was starting from a position of absolute
zero with regards to GIS, and also I wanted to be able to make use of the tools
I already knew, such as Pandas, matplotlib, and numpy.

Here's the start, importing the libraries, or the bits of them I needed:

#+begin_src python
import matplotlib.pyplot as plt
import numpy as np
import cartopy.crs as ccrs
from cartopy.io.img_tiles import GoogleTiles
import geopandas as gpd
import pandas as pd
#+end_src

I then had to read in the election data, which was a CSV files from the AEC
containing the Booth, and the final distributed percentage weighting to the ALP
and Greens candidates, and heir percentage scores.  As well, I read in the
boundary data:

#+begin_src python
bb = pd.read_csv('Elections/batman_booths_coords.csv')  # contains all election info plus lat, long of booths
longs = np.array(bb['Long'])
lats = np.array(bb['Lat'])
v = gpd.read_file('VicMaps/VIC_ELB.MIF')  # all electoral divisions in MapInfo form
bg = v.loc[2].geometry                    # This is the Polygon representing Batman
b_longs = bg.exterior.xy[0]               # These next two lines are the longitudes and latitudes
b_lats = bg.exterior.xy[1]                #
#+end_src

Notice that =bb= uses Pandas to read in the CSV files which contains all the AEC
information, as well as the latitude and longitude of each Booth, which I'd
added myself.  Here =longs= and =lats= are the coordinates of the polling
booths, and =b_longs= and =b-lats= are all the vertices which form the boundary
of the division.

Now it's all pretty straigtforward, especially with the examples mentioned above:

#+begin_src python
fig = plt.figure(figsize=(16,16))

tiler = GoogleTiles()
ax = plt.axes(projection=tiler.crs)

margin=0.01
ax.set_extent((bg.bounds[0]-margin, bg.bounds[2]+margin,bg.bounds[1]-margin, bg.bounds[3]+margin))

ax.add_image(tiler,12)
for i in range(44):
    plt.plot(longs[i],lats[i],ga2[i],markersize=abs(ga[i]),alpha=0.7,transform=ccrs.Geodetic())

plt.plot(b_longs,b_lats,'k-',linewidth=5,transform=ccrs.Geodetic())
plt.title('Booth results in the 2018 Batman by-election')
plt.show()
#+end_src 

Here =GoogleTiles= provide the street map to be used as the "base" of our map.
Open Streep Map (as OSM) is available too, but I thin in this instance, Google
Maps is better.  Because the map is rendered as an image (with some unavoidable
blurring), I find that Google gave a better result than OSM.

Also, =ga2= is a little array which simply produces plotting of the style =ro=
(red circle) or =go= (green circle).  Again, I make the program do most of the
work.

And here is the result, saved as an image:

![Batman 2018](/batman2018trim.png)

I'm quite pleased with this output.

And a quick check of some maths, first inline 
$ (x+2y)^3=x^3+6x^2y+12xy^2+8y^3 $ and also displayed:
<div>
$$
\int^\infty_{-\infty}e^{-x^2}\,dx=\sqrt{\pi}.
$$
</div>

** Presentations and the delight of js-reveal
  :PROPERTIES:
  :EXPORT_FILE_NAME: presentations_and_js_reveal
  :EXPORT_DATE: 2018-03-11
  :END:
Presentations are a modern bugbear. Anybody in academia or business, or
any professional field really, will have sat through untold hours of
presentations. And almost all of them are /terrible/. Wordy,
uninteresting, too many "transition effects", low information content,
you know as well as I do.

Pretty much every speaker reads the words on their slides, as though the
audience were illiterate. I went to a talk once which consisted of 60 --
yes, sixty -- slides of very dense text, and the presenter read through
each one. I think people were gnawing their own limbs off out of sheer
boredom by the end.
[[https://en.wikipedia.org/wiki/Empire_(1964_film)][Andy Warhol's
"Empire"]] would have been a welcome relief.

Since most of my talks are technical and full of mathematics, I have
naturally gravitated to the LaTeX presentation tool
[[https://en.wikipedia.org/wiki/Beamer_(LaTeX)][Beamer]]. Now Beamer is
a lovely thing for LaTeX: as part of the LaTeX ecosystem you get all of
LaTeX loveliness along with elegant slide layouts, transitions, etc. My
only issue with Beamer (and this is not a new observation by any means),
is that all Beamer presentations have a certain sameness to them. I
suspect that this is because most Beamer users are mathematicians, who
are rightly more interested in co[[https://orgmode.org][]]ntent than
appearance. It is quite possible of course to make Beamer look like
something new and different, but hardly anybody does.

However, I am not a mathematician, I am a mathematics educator, and I do
like my presentations to look good, and if possible to stand out a
little. I also have a minor issue in that I use Linux on my laptop,
which sometimes means my computer won't talk to an external projector
system. Or my USB thumb drive won't be recognized by the computer I'll
be using, and so on. One way round all this is to use an online system;
maybe one which can be displayed in a browser, and which can be placed
on a web server somewhere. There are of course plenty of such tools, and
I have had a brief dalliance with [[https://prezi.com][prezi]], but for
me prezi was not the answer: yes it was fun and provided a new paradigm
for organizing slides, but really, when you took the whizz-bang aspect
out, what was left? The few prezis I've seen in the wild showed that you
can be as dull with prezi as with any other software. Also, at the time
it didn't support mathematics.

In fact I have an abiding distrust of the whole concept of
"presentations". Most are a colossal waste of time -- people can read so
there's no need for wordiness, and most of the graphs and charts that
make up the rest of most slides are dreary and lacklustre. Hardly
anybody knows how to present information graphically in a way that
really grabs people's attention. It's lazy and insulting to your
audience to simply copy a chart from your spreadsheet and assume they'll
be delighted by it. Then you have the large class of people who fill
their blank spaces with cute cartoons and clip art. This sort of thing
annoys me probably more than it should -- when I'm in an audience I
don't want to be entertained with cute irrelevant additions, I want to
/learn/. This comes to the heart of presenting. A presenter is acting as
a teacher; the audience the learners. So presenting should be about
engaging the audience. What's in your slides comes a distant second. I
don't want new technology with clever animations and transitions,
bookmarks, non-linear slide shows; I want presenters to be themselves
interesting. (As an aside, some of the very worst presentations have
been at education conferences.)

For a superb example of attention-grabbing graphics, check out the
[[https://www.ted.com/talks/hans_rosling_shows_the_best_stats_you_ve_ever_seen][TED
talk]] by the late [[https://en.wikipedia.org/wiki/Hans_Rosling][Hans
Rosling]]. Or you can admire the work of
[[https://informationisbeautiful.net][David McCandless]].

I seem to have digressed, from talking about presentation software to
banging on about the awfulness of presentations generally. So, back to
the topic.

For a recent conference I determined to do just that: use an online
presentation tool, and I chose [[https://revealjs.com/#/][reveal.js]]. I
reckon reveal.js is presentations done right: elegant, customizable,
making the best use of html for content and css for design; and with
nicely chosen defaults so that even if you just put a few words on your
slides the result will still look good. Even better, you can take your
final slides and put them up on [[https://pages.github.com][github
pages]] so that you can access them from anywhere in the world with a
web browser. And if you're going somewhere which is not networked, you
can always take your slides on some sort of portable media. And it has
access to almost all of LaTeX via [[https://www.mathjax.org][MathJax]].

One minor problem with reveal.js is that the slides are built up with
raw html code, and so can be somewhat verbose and hard to read (at least
for me). However, there is a companion software for emacs org mode
called [[https://github.com/yjwen/org-reveal][org-reveal]], which
enables you to structure your reveal.js presentation as an org file.
This is presentation heaven. The org file gives you structure, and
reveal.js gives you a lovely presentation.

To make it available, you upload all your presentations to github.pages,
and you can present from anywhere in the world with an internet
connection! You can see an example of one of my short presentations at

[[https://amca01.github.io/ATCM_talks/lindenmayer.html]]

Of course the presentation (the software and what you do with it), is in
fact the least part of your talk. By far the most important part is the
presenter. The best software in the world won't overcome a boring
speaker who can't engage an audience.

I like my presentations to be simple and effect-free; I don't want the
audience to be distracted from my leaping and capering about.
Just to see how it works

** The Vigenere cipher in haskell
  :PROPERTIES:
  :EXPORT_FILE_NAME: vigenere_cipher_haskell
  :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :mathjax true
  :EXPORT_DATE: 2018-01-23
  :END:
Programming the Vigenère cipher is my go-to problem when learning a new
language. It's only ever a few lines of code, but it's a pleasant way of
getting to grips with some of the basics of syntax. For the past few
weeks I've been wrestling with [[https://www.haskell.org][Haskell]], and
I've now got to the stage where a Vigenère program is in fact pretty
easy.

As you know, the Vigenère cipher works using a plaintext and a keyword,
which is repeated as often as need be:

#+BEGIN_EXAMPLE
    T H I S I S T H E P L A I N T E X T
    K E Y K E Y K E Y K E Y K E Y K E Y
#+END_EXAMPLE

The corresponding letters are added modulo 26 (using the values A=0,
B=1, C=2, and on up to Z=25), then converted back to letters again. So
for the example above, we have these corresponding values:

#+BEGIN_EXAMPLE
    19   7   8  18   8  18  19   7   4  15  11   0   8  13  19   4  23  19
    10   4  24  10   4  24  10   4  24  10   4  24  10   4  24  10   4  24
#+END_EXAMPLE

Adding modulo 26 and converting back to letters:

#+BEGIN_EXAMPLE
    3  11   6   2  12  16   3  11   2  25  15  24  18  17  17
    D   L   G   C   M   Q   D   L   C   Z   P   Y   S   R   R
#+END_EXAMPLE

gives us the ciphertext.

The Vigenère cipher is historically important as it is one of the first
cryptosystems where a single letter may be encrypted to different
characters in the ciphertext. For example, the two "S"s are encrypted to
"C" and "Q"; the first and last "T"s are encrypted to "D" and "R". For
this reason the cipher was considered unbreakable - as indeed it was for
a long time - and was known to the French as /le chiffre
indéchiffrable/ - the unbreakable cipher. It was broken in 1863. See the
[[https://en.wikipedia.org/wiki/Vigenère_cipher][Wikipedia page]] for
more history.

Suppose the length of the keyword is . Then the -th character of the
plaintext will correspond to the character of the keyword (assuming a
zero-based indexing). Thus the encryption can be defined as

\[
c_i = p_i+k_{i\pmod{n}}\pmod{26}
\]

However, encryption can also be done without knowing the length of the
keyword, but by shifting the keyword each time - first letter to the
end - and simply taking the left-most letter. Like this:

#+BEGIN_EXAMPLE
    T H I S I S T H E P L A I N T E X T
    K E Y
#+END_EXAMPLE

so "T"+"K" (modulo 26) is the first encryption. Then we shift the
keyword:

#+BEGIN_EXAMPLE
    T H I S I S T H E P L A I N T E X T
      E Y K
#+END_EXAMPLE

and "H"+"E" (modulo 26) is the second encrypted letter. Shift again:

#+BEGIN_EXAMPLE
    T H I S I S T H E P L A I N T E X T
        Y K E
#+END_EXAMPLE

for "I"+"Y"; shift again:

#+BEGIN_EXAMPLE
    T H I S I S T H E P L A I N T E X T
          K E Y
#+END_EXAMPLE

for "S"+"K". And so on.

This is almost trivial in Haskell. We need two extra functions from the
module =Data.Char=: =chr= which gives the character corresponding to the
ascii value, and =ord= which gives the ascii value of a character:

#+BEGIN_SRC haskell
    λ> ord 'G'
    71
    λ> chr 88
    'X'
#+END_SRC

So here's what might go into a little file called =vigenere.hs=:

#+BEGIN_SRC haskell
    import Data.Char (ord,chr)

    vige :: [Char] -> [Char] -> [Char]
    vige [] k = []
    vige p [] = []
    vige (p:ps) (k:ks) = (encode p k):(vige ps (ks++[k]))
      where
        encode a b = chr $ 65 + mod (ord a + ord b) 26

    vigd :: [Char] -> [Char] -> [Char]
    vigd [] k = []
    vigd p [] = []
    vigd (p:ps) (k:ks) = (decode p k):(vigd ps (ks++[k]))
      where
        decode a b = chr $ 65 + mod (ord a - ord b) 26
#+END_SRC

And a couple of tests: the example from above, and the one on the
Wikipedia page:

#+BEGIN_SRC haskell
    λ> vige "THISISTHEPLAINTEXT" "KEY"
    "DLGCMQDLCZPYSRROBR"
    λ> vige "ATTACKATDAWN" "LEMON"
    "LXFOPVEFRNHR"
#+END_SRC

** Analysis of a recent election
  :PROPERTIES:
  :EXPORT_FILE_NAME: analysis_recent_election
  :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :mathjax true
  :EXPORT_DATE: 2017-12-07
  :END:
On November 18, 2017, a by-election was held in my suburb of
[[https://en.wikipedia.org/wiki/Northcote,_Victoria][Northcote]], on
account of the death by cancer of the sitting member. It turned into a
two-way contest between Labor (who had held the seat since its inception
in 1927), and the Greens, who are making big inroads into the inner
city. The Greens candidate won, much to Labor's surprise. As I played a
small part in this election, I had some interest in its result. And so I
thought I'd experiment with the results and see how close the result
was, and what other voting systems might have produced.

In Australia, the voting method used for almost all lower house
elections (state and federal), is
[[https://en.wikipedia.org/wiki/Instant-runoff_voting][Instant Runoff
Voting]], also known as the Alternative Vote, and known locally as the
"preferential method". Each voter must number the candidates
sequentially starting from 1. All boxes must be filled in (except the
last); no numbers can be repeated or missed. In Northcote there were 12
candidates, and so each voter had to number the boxes from 1 to 12 (or 1
to 11); any vote without those numbers is invalid and can't be counted.
Such votes are known as "informal". Ballots are distributed according to
first preferences. If no candidate has obtained an absolute majority,
then the candidate with the lowest count is eliminated, and all those
ballots distributed according to their second preferences. This
continues through as many redistributions as necessary until one
candidate ends up with an absolute majority of ballots. So at any stage
the candidate with the lowest number of ballots is eliminated, and those
ballots redistributed to the remaining candidates on the basis of the
highest preferences. As voting systems go it's not the worst, although
it has many faults. However, it is too entrenched in Australian
political life for change to be likely.

Each candidate had prepared a
[[https://en.wikipedia.org/wiki/How-to-vote_card][How to Vote card]],
listing the order of candidates they saw as being most likely to ensure
a good result for themselves. In fact there is no requirement for any
voter to follow a How to Vote card, but most voters do. For this reason
the ordering of candidates on these cards is taken very seriously, and
one of the less savoury aspects of Australian politics is backroom
"preference deals", where parties will wheel and deal to ensure best
possible preference positions on other How to Vote cards.

Here are the 12 candidates and their political parties, in the order as
listed on the ballots:

Attention: The internal data of table "4" is corrupted!

For this election the How to Vote cards can be seen at the
[[http://www.abc.net.au/news/elections/northcote-by-election-2017/][ABC
news site]]. The only candidate not to provide a full ordered list was
Joseph Toscano, who simple advised people to number his square 1, and
the other squares in any order they liked, along with a recommendation
for people to number Lidia Thorpe 2.

As I don't have a complete list of all possible ballots with their
orderings and numbers, I'm going to make the following assumptions:

1. Every voter followed the How to Vote card of their preferred
   candidate exactly.
2. Joseph Toscano's preference ordering is: 3,4,2,5,6,7,8,9,1,10,11,12
   (This gives Toscano 1; Thorpe 2; and puts the numbers 3 -- 12 in
   order in the remaining spaces).

These assumptions are necessarily crude, and don't reflect the nuances
of the election. But as we'll see they end up providing a remarkably
close fit with the final results.

For the exploration of the voting data I'll use Python, and so here is
all the How to Vote information as a dictionary:

#+begin_src python
  In [ ]: htv = dict()
          htv['Hayward']=[1,10,7,6,8,5,12,11,3,2,4,9]
          htv['Sanaghan']=[3,1,2,5,6,7,8,9,10,11,12,4]
          htv['Thorpe']=[6,9,1,3,10,8,12,2,7,4,5,11]
          htv['Lenk']=[7,8,3,1,5,11,12,2,9,4,6,10]
          htv['Chipp']=[10,12,4,5,1,6,7,3,11,9,2,8]
          htv['Cooper']=[5,12,8,6,2,1,7,3,11,9,10,4]
          htv['Rossiter']=[6,12,9,11,2,7,1,5,8,10,3,4]
          htv['Burns']=[10,12,5,3,2,4,6,1,11,9,8,7]
          htv['Toscano']=[3,4,2,5,6,7,8,9,1,10,11,12]
          htv['Edwards']=[2,10,4,3,8,9,12,6,5,1,7,11]
          htv['Spirovska']=[2,12,3,7,4,5,6,8,10,9,1,11]
          htv['Fontana']=[2,3,4,5,6,7,8,9,10,11,12,1]

  In [ ]: cands = list(htv.keys())
#+end_src

voting took place at different voting centres (also known as "booths"),
and the first preferences for each candidate at each booth can be found
at the
[[https://www.vec.vic.gov.au/Results/State2017/FPVbyVotingCentreNorthcoteDistrict.html][Victorian
Electoral Commission]]. I copied this information into a spreadsheet and
saved it as a CSV file. I then used the data analysis library
[[https://pandas.pydata.org][pandas]] to read it in as a
[[https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html][DataFrame]]:

#+begin_src python
  In [ ]: import pandas as pd
          firstprefs = pd.read_csv('northcote_results.csv')
          firsts = firstprefs.loc[:,'Hayward':'Fontana'].sum(axis=0)
          firsts

  Out[ ]: 
  Hayward        354
  Sanaghan       208
  Thorpe       16254
  Lenk           770
  Chipp         1149
  Cooper         433
  Rossiter      1493
  Burns        12721
  Toscano        329
  Edwards        154
  Spirovska      214
  Fontana       1857
  dtype: int64
#+end_src

As Thorpe has more votes than any other candidate, then by the voting
system of simple plurality (or
[[https://en.wikipedia.org/wiki/First-past-the-post_voting][First Past
The Post]]) she would win. This system is used in the USA, and is
possibly the worst of all systems for more than two candidates.


*** Checking IRV
    :PROPERTIES:
    :CUSTOM_ID: checking-irv
    :END:

So let's first check how IRV works, with a little program that starts
with a dictionary and first preferences of each candidate. Recall our
simplifying assumption that all voters vote according to the How to Vote
cards, which means that when a candidate is eliminated, all those votes
will go to just one other remaining candidate. In practice, of course,
those ballots would be redistributed across a number of candidates.

Here's a simple program to manage this version of IRV:

#+begin_src python
  def IRV(votes):
      # performs an IRV simulation on a list of first preferences: at each stage
      # deleting the candidate with the lowest current score, and distributing
      # that candidates votes to the highest remaining candidate
      vote_counts = votes.copy()
      for i in range(10):
          m = min(vote_counts.items(), key = lambda x: x[1])
          ind = next(j for j in range(2,11) if cands[htv[m[0]].index(j)] in vote_counts)
          c = cands[htv[m[0]].index(ind)]
          vote_counts += m[1]
          del(vote_counts[m[0]])
      return(vote_counts)
#+end_src

We could make this code a little more efficient by stopping when any
candidate has amassed over 50% pf the votes. But for simplicity we'll
eliminate 10 of the 12 candidates, so it will be perfectly clear who has
won. Let's try it out:

#+begin_src python
In [ ]: IRV(firsts)
  Out[ ]: 
  Thorpe    18648
  Burns     17288
  dtype: int64
#+end_src

Note that this is very close to the results listed on the VEC site:

#+begin_src python
  Thorpe:    18380
  Burns:     14410
  Fontana:   3298
#+end_src

At this stage it doesn't matter where Fontana's votes go (in fact they
would go to Burns), as Thorpe already has a majority. But the result we
obtained above with our simplifying assumptions gives very similar
values.

Now lets see what happens if we work through each booth independently:

#+begin_src python
  In [ ]: finals = {'Thorpe':0,'Burns':0}

  In [ ]: for i in firstprefs.index:
     ...:     booth = dict(firstprefs.loc[i,'Hayward':'Fontana'])
     ...:     f = IRV(booth)
     ...:     finals['Thorpe'] += f['Thorpe']
     ...:     finals['Burns'] += f['Burns']
     ...:     print(firstprefs.loc[i,'Booth'],': ',f)
     ...:     
  Alphington :  {'Thorpe': 524, 'Burns': 545}
  Alphington North :  {'Thorpe': 408, 'Burns': 485}
  Bell :  {'Thorpe': 1263, 'Burns': 893}
  Croxton :  {'Thorpe': 950, 'Burns': 668}
  Darebin Parklands :  {'Thorpe': 180, 'Burns': 204}
  Fairfield :  {'Thorpe': 925, 'Burns': 742}
  Northcote :  {'Thorpe': 1043, 'Burns': 875}
  Northcote North :  {'Thorpe': 1044, 'Burns': 1012}
  Northcote South :  {'Thorpe': 1392, 'Burns': 1137}
  Preston South :  {'Thorpe': 677, 'Burns': 639}
  Thornbury :  {'Thorpe': 1158, 'Burns': 864}
  Thornbury East :  {'Thorpe': 1052, 'Burns': 804}
  Thornbury South :  {'Thorpe': 1310, 'Burns': 1052}
  Westgarth :  {'Thorpe': 969, 'Burns': 536}
  Postal Votes :  {'Thorpe': 1509, 'Burns': 2262}
  Early Votes :  {'Thorpe': 5282, 'Burns': 3532}

  In [ ]: finals
  Out[ ]: {'Burns': 16250, 'Thorpe': 19686}
#+end_src

Note again that the results are surprisingly close to the
"[[https://www.vec.vic.gov.au/Results/State2017/TCPbyVotingCentreNorthcoteDistrict.html][two-party
preferred]]" results as reported again on the VEC site. This adds weight
to the notion that our assumptions, although crude, do in fact provide a
reasonable way of experimenting with the election results.

*** Borda counts
    :PROPERTIES:
    :CUSTOM_ID: borda-counts
    :END:

These are named for
[[https://en.wikipedia.org/wiki/Jean-Charles_de_Borda][Jean Charles de
Borda]] (1733 -- 1799) an early voting theorist. The idea is to weight
all the preferences, so that a preference of 1 has a higher weighting
that a preference of 2, and so on. All the weights are added, and the
candidate with the greatest total is deemed to be the winner. With
candidates, there are different methods of determining weighting;
probably the most popular is a simple linear weighting, so that a
preference of is weighted as . This gives weightings from down to zero.
Alternatively a weighting of can be used, which gives weights of down to
1. Both are equivalent in determining a winner. Another possible
weighting is .

Here's a program to compute Borda counts, again with our simplification:

#+begin_src python
  def borda(x): # x is 0 or 1
      borda_count = dict()
      for c in cands:
          borda_count=0.0
      for c in cands:
          v = firsts  #  number of 1st pref votes for candidate c
          for i in range(1,13):
              appr = cands[htv.index(i)]  # the candidate against position i on c htv card
              if x==0:
                  borda_count[appr] += v/i
              else:
                  borda_count[appr] += v*(11-i)
      if x==0:
          for k, val in borda_count.items():
              borda_count[k] = float("{:.2f}".format(val))
      else:
          for k, val in borda_count.items():
              borda_count[k] = int(val)
      return(borda_count)
#+end_src

Now we can run this, and to make our lives easier we'll sort the
results:

#+begin_src python
  In [ ]: sorted(borda(1).items(), key = lambda x: x[1], reverse = True)
  Out[ ]: 
  [('Burns', 308240),
   ('Thorpe', 279392),
   ('Lenk', 266781),
   ('Chipp', 179179),
   ('Cooper', 167148),
   ('Spirovska', 165424),
   ('Edwards', 154750),
   ('Hayward', 136144),
   ('Fontana', 88988),
   ('Toscano', 80360),
   ('Rossiter', 75583),
   ('Sanaghan', 38555)]

  In [ ]: sorted(borda(0).items(), key = lambda x: x[1], reverse = True)
  Out[ ]: 
  [('Burns', 22409.53),
   ('Thorpe', 20455.29),
   ('Lenk', 11485.73),
   ('Chipp', 10767.9),
   ('Spirovska', 6611.22),
   ('Cooper', 6592.5),
   ('Edwards', 6569.93),
   ('Hayward', 6186.93),
   ('Fontana', 6006.25),
   ('Rossiter', 5635.08),
   ('Toscano', 4600.15),
   ('Sanaghan', 4196.47)]
#+end_src

Note that in both cases Burns has the highest output. This is in general
to be expected of Borda counts: that the highest value does not
necessarily correspond to the candidate which is seen as better overall.
For this reason Borda counts are rarely used in modern systems, although
they can be used to give a general picture of an electorate.

*** Condorcet criteria
    :PROPERTIES:
    :CUSTOM_ID: condorcet-criteria
    :END:

There are a vast number of voting systems which treat the vote as
simultaneous pairwise contests. For example in a three way contest,
between Alice, Bob, and Charlie the system considers the contest between
Alice and Bob, between Alice and Charlie, and between Bob and Charlie.
Each of these contests will produce a winner, and the outcome of all the
pairwise contests is used to determine the overall winner. If there is a
single person who is preferred, by a majority of voters, in each of
their pairwise contests, then that person is called a /Condorcet
winner/. This is named for the
[[https://en.wikipedia.org/wiki/Marquis_de_Condorcet][Marquis de
Condorcet]] (1743 -- 1794) another early voting theorist. The /Condorcet
criterion/ is one of many criteria considered appropriate for a voting
system; it says that if the ballots return a Condorcet winner, then that
winner should be chosen by the system. This is one of the faults of IRV:
that it does not necessarily return a Condorcet winner.

Let's look again at the How to Vote preferences, and the numbers of
voters of each:

#+BEGIN_SRC
  In [ ]: htvd = pd.DataFrame(list(htv.values()),index=htv.keys(),columns=htv.keys()).transpose()
  In [ ]: htvd.loc['Firsts']=list(firsts.values)
  In [ ]: htvd

  Out[ ]: 
             Hayward  Sanaghan  Thorpe  Lenk  Chipp  Cooper  Rossiter  Burns  Toscano  Edwards  Spirovska  Fontana
  Hayward          1         3       6     7     10       5         6     10        3        2          2        2
  Sanaghan        10         1       9     8     12      12        12     12        4       10         12        3
  Thorpe           7         2       1     3      4       8         9      5        2        4          3        4
  Lenk             6         5       3     1      5       6        11      3        5        3          7        5
  Chipp            8         6      10     5      1       2         2      2        6        8          4        6
  Cooper           5         7       8    11      6       1         7      4        7        9          5        7
  Rossiter        12         8      12    12      7       7         1      6        8       12          6        8
  Burns           11         9       2     2      3       3         5      1        9        6          8        9
  Toscano          3        10       7     9     11      11         8     11        1        5         10       10
  Edwards          2        11       4     4      9       9        10      9       10        1          9       11
  Spirovska        4        12       5     6      2      10         3      8       11        7          1       12
  Fontana          9         4      11    10      8       4         4      7       12       11         11        1
  Firsts         354       208   16254   770   1149     433      1493  12721      329      154        214     1857
#+END_SRC

Here the how to vote information is in the columns. If we look at just
the first two candidates, we see that Hayward is preferred to Sanaghan
by all voters except for those who voted for Sanaghan. Thus a majority
(in fact, nearly all) voters preferred Hayward to Sanaghan.

For each pair of candidates, the number of voters preferring one to the
other can be computed by this program:

#+BEGIN_SRC python
  def condorcet():
      condorcet_table = pd.DataFrame(columns=cands,index=cands).fillna(0)
      for c in cands:
          hc = htv
          for i in range(12):
              for j in range(12):
                  if hc[i] &lt; hc[j]:
                      condorcet_table.loc[cands[i],cands[j]] += firsts
      return(condorcet_table)
#+END_SRC

We can see the results of this program:

#+BEGIN_SRC python
  In [ ]: ct = condorcet(); ct
  Out[ ]: 
             Hayward  Sanaghan  Thorpe   Lenk  Chipp  Cooper  Rossiter  Burns  Toscano  Edwards  Spirovska  Fontana
  Hayward          0     35728    4505   5042  19370   21633     20573   3116    35607     4888       3335    18283
  Sanaghan       208         0    2065   2394  18648    3164     19926   2748     2835     2394       2394    17715
  Thorpe       31431     33871       0  21504  20140   20935     34010  19370    33760    35428      32726    32153
  Lenk         30894     33542   14432      0  19926   33442     34229   3886    33760    33935      32726    31945
  Chipp        16566     17288   15796  16010      0   18895     34443   6037    18845    18404      18960    33871
  Cooper       14303     32772   15001   2494  17041       0     34443   3395    18075    18404      15548    31608
  Rossiter     15363     16010    1926   1707   1493    1493         0   4101    18075    18404      17041    15906
  Burns        32820     33188   16566  32050  29899   32541     31835      0    35099    35428      32726    32024
  Toscano        329     33101    2176   2176  17091   17861     17861    837        0     3887       2902    18075
  Edwards      31048     33542     508   2001  17532   17532     17532    508    32049        0      20359    18075
  Spirovska    32601     33542    3210   3210  16976   20388     18895   3210    33034    15577          0    20717
  Fontana      17653     18221    3783   3991   2065    4328     20030   3912    17861    17861      15219        0
#+END_SRC

What we want to see, of course, if anybody has obtained a majority of
preferences against everybody else. To do this we can find all the
values greater than the majority, and add up their number. A value of 11
indicates a Condorcet winner:

#+BEGIN_SRC python
  In [ ]: maj = firsts.sum()//2 + 1; maj
  Out[ ]: 17969

  In [ ]: ((ct &gt;= maj)*1).sum(axis = 1)
  Out[ ]: 
  Hayward       6.0
  Sanaghan      2.0
  Thorpe       11.0
  Lenk          9.0
  Chipp         6.0
  Cooper        5.0
  Rossiter      2.0
  Burns        10.0
  Toscano       2.0
  Edwards       5.0
  Spirovska     6.0
  Fontana       2.0
  dtype: float64
#+END_SRC

So in this case we do indeed have a Condorcet winner in Thorpe, and this
election (at least with our simplifying assumptions) is also one in
which IRV returned the Condorcet winner.

*** Range and approval voting
    :PROPERTIES:
    :CUSTOM_ID: range-and-approval-voting
    :END:

If you go to [[http://rangevoting.org][rangevoting.org]] you'll find a
nspirited defense of a system called /range voting/. To vote in such a
system, each voter gives an "approval weight" for each candidate. For
example, the voter may mark off a value between 0 and 10 against each
candidate, indicating their level of approval. There is no requirement
for a voter to mark candidates differently: a voter might give all
candidates a value of 10, or of zero, or give one candidate 10 and all
the others zero. One simplified version of range voting is approval
voting, where the voter simply indicates as many or as few candidates as
she or he approves of. A voter may approve of just one candidate, or all
of them. As with range voting, the winner is the one with the maximum
number of approvals. A system where each voter approves of just one
candidate is the First Past the Post system, and as we have seen
previously, this is equivalent to simply counting only the first
preferences of our ballots.

We can't possibly know how voters may have approved of the candidates,
but we can run a simple simulation: given a number between 1 and 12,
suppose that each voter approves of their first preferences. Given the
preferences and numbers, we can easily tally the approvals for each
voter:

#+BEGIN_SRC python
def approvals(n):
      # Determines the approvals result if voters took their
      # first n preferences as approvals
      approvals_result = dict()
      for c in cands:
          approvals_result = 0
      firsts = firstprefs.loc[:,'Hayward':'Fontana'].sum(axis=0)
      for c in cands:
          v = firsts  #  number of 1st pref votes for candidate c
          for i in range(1,n+1):
              appr = cands[htv.index(i)]  # the candidate against position i on c htv card
              approvals_result[appr] += v
      return(approvals_result)
#+END_SRC

Now we can see what happens with approvals for :

#+BEGIN_SRC python
  In [1 ]: for i in range(1,7):
      ...:     si = sorted(approvals(i).items(),key = lambda x: x[1],reverse=True)
      ...:     print([i]+[s[0] for s in si])
      ...:     
  [1, 'Thorpe', 'Burns', 'Fontana', 'Rossiter', 'Chipp', 'Lenk', 'Cooper', 'Hayward', 'Toscano', 'Spirovska', 'Sanaghan', 'Edwards']
  [2, 'Burns', 'Thorpe', 'Chipp', 'Hayward', 'Fontana', 'Rossiter', 'Spirovska', 'Lenk', 'Edwards', 'Cooper', 'Toscano', 'Sanaghan']
  [3, 'Burns', 'Lenk', 'Thorpe', 'Chipp', 'Hayward', 'Spirovska', 'Sanaghan', 'Fontana', 'Rossiter', 'Toscano', 'Edwards', 'Cooper']
  [4, 'Burns', 'Lenk', 'Thorpe', 'Edwards', 'Chipp', 'Cooper', 'Fontana', 'Spirovska', 'Hayward', 'Sanaghan', 'Rossiter', 'Toscano']
  [5, 'Thorpe', 'Lenk', 'Burns', 'Spirovska', 'Edwards', 'Chipp', 'Cooper', 'Fontana', 'Hayward', 'Sanaghan', 'Rossiter', 'Toscano']
  [6, 'Lenk', 'Thorpe', 'Burns', 'Hayward', 'Spirovska', 'Chipp', 'Edwards', 'Cooper', 'Rossiter', 'Fontana', 'Sanaghan', 'Toscano']
#+END_SRC

It's remarkable, that after , the first number of approvals required for
Thorpe again to win is .

*** Other election methods
    :PROPERTIES:
    :CUSTOM_ID: other-election-methods
    :END:

There are of course many many other methods of selecting a winning
candidate from ordered ballots. And each of them has advantages and
disadvantages. Some of the disadvantages are subtle (although
important); others have glaring inadequacies, such as first past the
post for more than two candidates. One such
[[https://en.wikipedia.org/wiki/Comparison_of_electoral_systems][comparison
table]] lists voting methods against standard criteria. Note that IRV --
the Australian preferential system -- is one of the very few methods to
fail monotonicity. This is seen as one of the system's worst failings.
You can see an example of this in an
[[https://numbersandshapes.net/2010/07/mathematics-of-voting-3-electing-a-candidate-instant-runoff-voting/][old
blog post]].

Rather than write our own programs, we shall simply dump our information
into the
[[http://www1.cse.wustl.edu/~legrand/rbvote/calc.html][Ranked-ballot
voting calculator]] page and see what happens. First the data needs to
be massaged into an appropriate form:

#+BEGIN_SRC python
  In [ ]: for c in cands:
     ...:     st = str(firsts)+":"+c
     ...:     for i in range(2,13):
     ...:         st += "&gt;"+cands[htv.index(i)]
     ...:     print(st)
     ...:     
  354:Hayward&gt;Edwards&gt;Toscano&gt;Spirovska&gt;Cooper&gt;Lenk&gt;Thorpe&gt;Chipp&gt;Fontana&gt;Sanaghan&gt;Burns&gt;Rossiter
  208:Sanaghan&gt;Thorpe&gt;Hayward&gt;Fontana&gt;Lenk&gt;Chipp&gt;Cooper&gt;Rossiter&gt;Burns&gt;Toscano&gt;Edwards&gt;Spirovska
  16254:Thorpe&gt;Burns&gt;Lenk&gt;Edwards&gt;Spirovska&gt;Hayward&gt;Toscano&gt;Cooper&gt;Sanaghan&gt;Chipp&gt;Fontana&gt;Rossiter
  770:Lenk&gt;Burns&gt;Thorpe&gt;Edwards&gt;Chipp&gt;Spirovska&gt;Hayward&gt;Sanaghan&gt;Toscano&gt;Fontana&gt;Cooper&gt;Rossiter
  1149:Chipp&gt;Spirovska&gt;Burns&gt;Thorpe&gt;Lenk&gt;Cooper&gt;Rossiter&gt;Fontana&gt;Edwards&gt;Hayward&gt;Toscano&gt;Sanaghan
  433:Cooper&gt;Chipp&gt;Burns&gt;Fontana&gt;Hayward&gt;Lenk&gt;Rossiter&gt;Thorpe&gt;Edwards&gt;Spirovska&gt;Toscano&gt;Sanaghan
  1493:Rossiter&gt;Chipp&gt;Spirovska&gt;Fontana&gt;Burns&gt;Hayward&gt;Cooper&gt;Toscano&gt;Thorpe&gt;Edwards&gt;Lenk&gt;Sanaghan
  12721:Burns&gt;Chipp&gt;Lenk&gt;Cooper&gt;Thorpe&gt;Rossiter&gt;Fontana&gt;Spirovska&gt;Edwards&gt;Hayward&gt;Toscano&gt;Sanaghan
  329:Toscano&gt;Thorpe&gt;Hayward&gt;Sanaghan&gt;Lenk&gt;Chipp&gt;Cooper&gt;Rossiter&gt;Burns&gt;Edwards&gt;Spirovska&gt;Fontana
  154:Edwards&gt;Hayward&gt;Lenk&gt;Thorpe&gt;Toscano&gt;Burns&gt;Spirovska&gt;Chipp&gt;Cooper&gt;Sanaghan&gt;Fontana&gt;Rossiter
  214:Spirovska&gt;Hayward&gt;Thorpe&gt;Chipp&gt;Cooper&gt;Rossiter&gt;Lenk&gt;Burns&gt;Edwards&gt;Toscano&gt;Fontana&gt;Sanaghan
  1857:Fontana&gt;Hayward&gt;Sanaghan&gt;Thorpe&gt;Lenk&gt;Chipp&gt;Cooper&gt;Rossiter&gt;Burns&gt;Toscano&gt;Edwards&gt;Spirovska
  </pre>
#+END_SRC

The above can be copied and pasted into the given text box. Then the
page returns:

#+begin_export html
<style>
.basic-styling td,
.basic-styling th {
  border: 0px solid #999;
  padding: 0.25rem;
}
</style>
#+end_export
#+attr_html: :class basic-styling
|--------+-----------|
| winner | method(s) |
|--------+-----------|
| Thorpe | Baldwin   |
|        | Black     |
|        | Carey     |
|        | Coombs    |
|        | Copeland  |
|        | Dodgson   |
|        | Hare      |
|        | Nanson    |
|        | Raynaud   |
|        | Schulze   |
|        | Simpson   |
|        | Small     |
|        | Tideman   |
|--------+-----------|
| Burns  | Borda     |
|        | Bucklin   |
|--------+-----------|

You can see that Thorpe would be the winner under almost every other
voting system. This indicates that Thorpe being returned by IRV seems
not just an artifact of the system, but represents the genuine wishes of
the electorate.

** Programmable CAD
  :PROPERTIES:
  :EXPORT_FILE_NAME: programmable-cad
  :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :mathjax true
  :EXPORT_DATE: 2017-11-24
  :END:
Every few years I decide to have a go at using a CAD package for the
creation of 3D diagrams and shapes, and every time I give it up. There's
simply too much to learn in terms of creating shapes, moving them about,
and so on, and every system seems to have its own ways of doing things.
My son (who is an expert in [[https://www.blender.org][Blender]])
recommended that I experiment with
[[https://www.tinkercad.com][Tinkercad]], and indeed this is probably a
pretty easy way of getting started with 3D CAD. But it didn't suit me: I
wanted to place things precisely in relation to each other, and fiddling
with dragging and dropping with the mouse was harder and more
inconvenient than it should have been. No doubt there are ways of
getting exact line ups, but it isn't obvious to the raw beginner.

I then discovered that there are lots of different CAD "programming
languages"; or more properly scripting languages, where the user
describes how the figure is to be built in the system's language. Then
the system builds it from the script. In this sense these systems are
descendants of the venerable
[[https://en.wikipedia.org/wiki/VRML][VRML]], of which you can see some
[[http://cs.lmu.edu/~ray/notes/vrmlexamples/][examples here]], and its
modern version [[https://en.wikipedia.org/wiki/X3D][X3D]].

Some of the systems that I looked at were:

- [[http://www.openscad.org][OpenSCAD]], which uses its own scripting
  language
- [[https://openjscad.org][OpenJSCAD]], based on JavaScript
- [[https://github.com/colah/ImplicitCAD][implicitCAD]], based on
  Haskell,

No doubt there are others. All of these systems have primitive shapes
(spheres, cubes, cylinders etc), operations on shapes (shifting,
stretching, rotating, extruding etc) so a vast array of different forms
can be generated. Some systems allow for a great deal of flexibility, so
that a cylinder with a radius of zero at one end will be a cone, or of
different radii at each end a frustum.

I ended up choosing OpenJSCAD, which is being actively developed, is
based on a well known and robust language, and is also great fun to use.
Here is a simple example, to construct a tetrahedron whose vertices are
chosen from the vertices of a cube with vertices . The vertices whose
product is 1 will be the vertices of a tetrahedron. We can make a nice
tetrahedral shape by putting a small sphere at each vertex, and joining
each sphere by a cylinder of the same radius:

#+begin_export html
<div class="CSG" style="width:750px; height:500px;">
<script type="text/javascript">
  var rad = 0.1; // radius of sphere at vertex and cylinders

  var v0 = [1,1,1];
  var v1 = [1,-1,-1];
  var v2 = [-1,1,-1];
  var v3 = [-1,-1,1];
  var vertices = [v0,v1,v2,v3];

  // adjacency lists:
  var adj = [[1,2,3],[0,2,3],[0,1,3],[0,1,2]];

  function main() {
    var t = [];   
    for(var i = 0; i &lt; 4; i++) {    // loop through the list of vertices
      var here = vertices[i];
      t.push(translate(here,sphere({r:rad})));
      for(var j = 0; j &lt; 3; j++) {  // for each vertex join it to the others in its adjacency list
        var there = vertices[adj[i][j]];
        t.push(cylinder({start:here,end:there,r:rad}));
      }
    }
    return union(t);
  }
  </script>
</div>
#+end_export 

The code should be fairly self-explanatory. And here is the tetrahedron:

I won't put these models in this post, as one of them is slow to render:
but look at a
[[https://numbersandshapes.net/openjscad/tetrahedron.html][coloured
tetrahedron]], and an
[[https://numbersandshapes.net/openjscad/icosahedron.html][icosahedron]].

Note that CAD design of this sort is not so much for animated media so
much as precise designs for 3D printing. But I like it for exploring 3D
geometry.

* COMMENT Local Variables                                 :ARCHIVE:
# Local Variables:
# fill-column: 80
# eval: (auto-fill-mode 1)
# eval: (add-hook 'after-save-hook #'org-hugo-export-wim-to-md-after-save :append :local)
# org-hugo-footer: "\n\n[//]: # \"Exported with love from a post written in Org mode\"\n[//]: # \"- https://github.com/kaushalmodi/ox-hugo\""
# End:

